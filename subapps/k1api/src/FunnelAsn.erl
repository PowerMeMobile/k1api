%% Generated by the Erlang ASN.1 BER-compiler version:1.6.18
%% Purpose: encoder and decoder to the types in mod FunnelAsn

-module('FunnelAsn').
-include("FunnelAsn.hrl").
-define('RT_BER',asn1rt_ber_bin).
-asn1_info([{vsn,'1.6.18'},
            {module,'FunnelAsn'},
            {options,[{outdir,[115,114,99]},noobj,{i,[46]},{i,[97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_BindRequest'/2,
'enc_PreciseTime'/2,
'enc_BindResponse'/2,
'enc_Customer'/2,
'enc_Provider'/2,
'enc_Network'/2,
'enc_DisconnectRequest'/2,
'enc_DisconnectResponse'/2,
'enc_ConnectionsRequest'/2,
'enc_ConnectionsResponse'/2,
'enc_ThroughputRequest'/2,
'enc_ThroughputResponse'/2,
'enc_Slice'/2,
'enc_Counter'/2,
'enc_Connection'/2,
'enc_ServerUpEvent'/2,
'enc_ServerDownEvent'/2,
'enc_ConnectionUpEvent'/2,
'enc_ConnectionDownEvent'/2,
'enc_Error'/2,
'enc_OutgoingBatch'/2,
'enc_OutgoingMessage'/2,
'enc_ReceiptBatch'/2,
'enc_DeliveryReceipt'/2,
'enc_BatchAck'/2,
'enc_Addr'/2
]).

-export([
'dec_BindRequest'/2,
'dec_PreciseTime'/2,
'dec_BindResponse'/2,
'dec_Customer'/2,
'dec_Provider'/2,
'dec_Network'/2,
'dec_DisconnectRequest'/2,
'dec_DisconnectResponse'/2,
'dec_ConnectionsRequest'/2,
'dec_ConnectionsResponse'/2,
'dec_ThroughputRequest'/2,
'dec_ThroughputResponse'/2,
'dec_Slice'/2,
'dec_Counter'/2,
'dec_Connection'/2,
'dec_ServerUpEvent'/2,
'dec_ServerDownEvent'/2,
'dec_ConnectionUpEvent'/2,
'dec_ConnectionDownEvent'/2,
'dec_Error'/2,
'dec_OutgoingBatch'/2,
'dec_OutgoingMessage'/2,
'dec_ReceiptBatch'/2,
'dec_DeliveryReceipt'/2,
'dec_BatchAck'/2,
'dec_Addr'/2
]).

-export([
'dec_BindRequest'/3,
'dec_PreciseTime'/3,
'dec_BindResponse'/3,
'dec_Customer'/3,
'dec_Provider'/3,
'dec_Network'/3,
'dec_DisconnectRequest'/3,
'dec_DisconnectResponse'/3,
'dec_ConnectionsRequest'/3,
'dec_ConnectionsResponse'/3,
'dec_ThroughputRequest'/3,
'dec_ThroughputResponse'/3,
'dec_Slice'/3,
'dec_Counter'/3,
'dec_Connection'/3,
'dec_ServerUpEvent'/3,
'dec_ServerDownEvent'/3,
'dec_ConnectionUpEvent'/3,
'dec_ConnectionDownEvent'/3,
'dec_Error'/3,
'dec_OutgoingBatch'/3,
'dec_OutgoingMessage'/3,
'dec_ReceiptBatch'/3,
'dec_DeliveryReceipt'/3,
'dec_BatchAck'/3,
'dec_Addr'/3
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,wrap_encode(Bytes)};
  Bytes ->
    {ok,wrap_encode(Bytes)}
end.

decode(Type,Data) ->
case catch decode_disp(Type,wrap_decode(Data)) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('BindRequest',Data) -> 'enc_BindRequest'(Data,[]);
encode_disp('PreciseTime',Data) -> 'enc_PreciseTime'(Data,[]);
encode_disp('BindResponse',Data) -> 'enc_BindResponse'(Data,[]);
encode_disp('Customer',Data) -> 'enc_Customer'(Data,[]);
encode_disp('Provider',Data) -> 'enc_Provider'(Data,[]);
encode_disp('Network',Data) -> 'enc_Network'(Data,[]);
encode_disp('DisconnectRequest',Data) -> 'enc_DisconnectRequest'(Data,[]);
encode_disp('DisconnectResponse',Data) -> 'enc_DisconnectResponse'(Data,[]);
encode_disp('ConnectionsRequest',Data) -> 'enc_ConnectionsRequest'(Data,[]);
encode_disp('ConnectionsResponse',Data) -> 'enc_ConnectionsResponse'(Data,[]);
encode_disp('ThroughputRequest',Data) -> 'enc_ThroughputRequest'(Data,[]);
encode_disp('ThroughputResponse',Data) -> 'enc_ThroughputResponse'(Data,[]);
encode_disp('Slice',Data) -> 'enc_Slice'(Data,[]);
encode_disp('Counter',Data) -> 'enc_Counter'(Data,[]);
encode_disp('Connection',Data) -> 'enc_Connection'(Data,[]);
encode_disp('ServerUpEvent',Data) -> 'enc_ServerUpEvent'(Data,[]);
encode_disp('ServerDownEvent',Data) -> 'enc_ServerDownEvent'(Data,[]);
encode_disp('ConnectionUpEvent',Data) -> 'enc_ConnectionUpEvent'(Data,[]);
encode_disp('ConnectionDownEvent',Data) -> 'enc_ConnectionDownEvent'(Data,[]);
encode_disp('Error',Data) -> 'enc_Error'(Data,[]);
encode_disp('OutgoingBatch',Data) -> 'enc_OutgoingBatch'(Data,[]);
encode_disp('OutgoingMessage',Data) -> 'enc_OutgoingMessage'(Data,[]);
encode_disp('ReceiptBatch',Data) -> 'enc_ReceiptBatch'(Data,[]);
encode_disp('DeliveryReceipt',Data) -> 'enc_DeliveryReceipt'(Data,[]);
encode_disp('BatchAck',Data) -> 'enc_BatchAck'(Data,[]);
encode_disp('Addr',Data) -> 'enc_Addr'(Data,[]);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('BindRequest',Data) -> 'dec_BindRequest'(Data,mandatory);
decode_disp('PreciseTime',Data) -> 'dec_PreciseTime'(Data,mandatory);
decode_disp('BindResponse',Data) -> 'dec_BindResponse'(Data,mandatory);
decode_disp('Customer',Data) -> 'dec_Customer'(Data,mandatory);
decode_disp('Provider',Data) -> 'dec_Provider'(Data,mandatory);
decode_disp('Network',Data) -> 'dec_Network'(Data,mandatory);
decode_disp('DisconnectRequest',Data) -> 'dec_DisconnectRequest'(Data,mandatory);
decode_disp('DisconnectResponse',Data) -> 'dec_DisconnectResponse'(Data,mandatory);
decode_disp('ConnectionsRequest',Data) -> 'dec_ConnectionsRequest'(Data,mandatory);
decode_disp('ConnectionsResponse',Data) -> 'dec_ConnectionsResponse'(Data,mandatory);
decode_disp('ThroughputRequest',Data) -> 'dec_ThroughputRequest'(Data,mandatory);
decode_disp('ThroughputResponse',Data) -> 'dec_ThroughputResponse'(Data,mandatory);
decode_disp('Slice',Data) -> 'dec_Slice'(Data,mandatory);
decode_disp('Counter',Data) -> 'dec_Counter'(Data,mandatory);
decode_disp('Connection',Data) -> 'dec_Connection'(Data,mandatory);
decode_disp('ServerUpEvent',Data) -> 'dec_ServerUpEvent'(Data,mandatory);
decode_disp('ServerDownEvent',Data) -> 'dec_ServerDownEvent'(Data,mandatory);
decode_disp('ConnectionUpEvent',Data) -> 'dec_ConnectionUpEvent'(Data,mandatory);
decode_disp('ConnectionDownEvent',Data) -> 'dec_ConnectionDownEvent'(Data,mandatory);
decode_disp('Error',Data) -> 'dec_Error'(Data,mandatory);
decode_disp('OutgoingBatch',Data) -> 'dec_OutgoingBatch'(Data,mandatory);
decode_disp('OutgoingMessage',Data) -> 'dec_OutgoingMessage'(Data,mandatory);
decode_disp('ReceiptBatch',Data) -> 'dec_ReceiptBatch'(Data,mandatory);
decode_disp('DeliveryReceipt',Data) -> 'dec_DeliveryReceipt'(Data,mandatory);
decode_disp('BatchAck',Data) -> 'dec_BatchAck'(Data,mandatory);
decode_disp('Addr',Data) -> 'dec_Addr'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).



wrap_encode(Bytes) when is_list(Bytes) ->
   binary_to_list(list_to_binary(Bytes));
wrap_encode(Bytes) when is_binary(Bytes) ->
   binary_to_list(Bytes);
wrap_encode(Bytes) -> Bytes.

wrap_decode(Bytes) when is_list(Bytes) ->
   list_to_binary(Bytes);
wrap_decode(Bytes) -> Bytes.


info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  BindRequest
%%================================
'enc_BindRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,connectionId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,remoteIp), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,customerId), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type IA5String
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(5,Val,userId), 22, [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type IA5String
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(6,Val,password), 22, [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case (case ?RT_BER:cindex(7,Val,type) of {_,Enumval6}->Enumval6;_->?RT_BER:cindex(7,Val,type) end) of
transmitter -> ?RT_BER:encode_enumerated(0,[{tag,128,5,'IMPLICIT',32}]);
receiver -> ?RT_BER:encode_enumerated(1,[{tag,128,5,'IMPLICIT',32}]);
transceiver -> ?RT_BER:encode_enumerated(2,[{tag,128,5,'IMPLICIT',32}]);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end,

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_boolean(?RT_BER:cindex(8,Val,isCached), [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8   External FunnelAsn:PreciseTime
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_PreciseTime'(?RT_BER:cindex(9,Val,timestamp), [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9   External FunnelAsn:PreciseTime
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_PreciseTime'(?RT_BER:cindex(10,Val,expiration), [{tag,128,8,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BindRequest'(Bytes, OptOrMand) ->
   'dec_BindRequest'(Bytes, OptOrMand, []).

'dec_BindRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type IA5String
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_restricted_string(Bytes5,[],22,[{tag,128,3,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 5 with type IA5String
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_restricted_string(Bytes6,[],22,[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_enumerated(Bytes7,[],[{transmitter,0},{receiver,1},{transceiver,2}],[{tag,128,5,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_boolean(Bytes8,[{tag,128,6,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 8   External FunnelAsn:PreciseTime
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = 'dec_PreciseTime'(Bytes9, mandatory, [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9   External FunnelAsn:PreciseTime
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = 'dec_PreciseTime'(Bytes10, mandatory, [{tag,128,8,'IMPLICIT',32}]),

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'BindRequest', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


%%================================
%%  PreciseTime
%%================================
'enc_PreciseTime'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(2,Val,time), [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,milliseconds), [{tag,128,1,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PreciseTime'(Bytes, OptOrMand) ->
   'dec_PreciseTime'(Bytes, OptOrMand, []).

'dec_PreciseTime'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_utc_time(Bytes2,[],[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,[],[{tag,128,1,'IMPLICIT',32}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PreciseTime', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BindResponse
%%================================
'enc_BindResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,connectionId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_BindResponse_result'(?RT_BER:cindex(3,Val,result), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  BindResponse_result
%%================================

'enc_BindResponse_result'({'BindResponse_result',Val}, TagIn) ->
   'enc_BindResponse_result'(Val, TagIn);

'enc_BindResponse_result'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      customer ->
         'enc_Customer'(element(2,Val), [{tag,128,0,'IMPLICIT',32}]);
      error ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [{tag,128,1,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_BindResponse_result'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'customer'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_Customer'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',32}]),
         {{customer, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'error'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),
         {{error, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_BindResponse'(Bytes, OptOrMand) ->
   'dec_BindResponse'(Bytes, OptOrMand, []).

'dec_BindResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_BindResponse_result'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BindResponse', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  Customer
%%================================
'enc_Customer'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,uuid), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,priority), [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,rps) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,rps), [{tag,128,3,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_Customer_allowedSources'(?RT_BER:cindex(6,Val,allowedSources), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6   External FunnelAsn:Addr OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,defaultSource) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Addr'(?RT_BER:cindex(7,Val,defaultSource), [{tag,128,5,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_Customer_networks'(?RT_BER:cindex(8,Val,networks), [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_Customer_providers'(?RT_BER:cindex(9,Val,providers), [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,defaultProviderId) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(10,Val,defaultProviderId), 22, [{tag,128,8,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 10 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes10,EncLen10} = ?RT_BER:encode_boolean(?RT_BER:cindex(11,Val,receiptsAllowed), [{tag,128,9,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 11 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes11,EncLen11} = ?RT_BER:encode_boolean(?RT_BER:cindex(12,Val,noRetry), [{tag,128,10,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 12 with type IA5String
%%-------------------------------------------------
   {EncBytes12,EncLen12} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(13,Val,defaultValidity), 22, [{tag,128,11,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 13 with type INTEGER
%%-------------------------------------------------
   {EncBytes13,EncLen13} = ?RT_BER:encode_integer([], ?RT_BER:cindex(14,Val,maxValidity), [{tag,128,12,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Customer_allowedSources
%%================================

'enc_Customer_allowedSources'({'Customer_allowedSources',Val}, TagIn) ->
   'enc_Customer_allowedSources'(Val, TagIn);

'enc_Customer_allowedSources'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Customer_allowedSources_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Customer_allowedSources_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Customer_allowedSources_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Addr'(H, []),
   'enc_Customer_allowedSources_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Customer_allowedSources'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Addr'/3, [], []).





%%================================
%%  Customer_networks
%%================================

'enc_Customer_networks'({'Customer_networks',Val}, TagIn) ->
   'enc_Customer_networks'(Val, TagIn);

'enc_Customer_networks'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Customer_networks_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Customer_networks_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Customer_networks_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Network'(H, []),
   'enc_Customer_networks_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Customer_networks'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Network'/3, [], []).





%%================================
%%  Customer_providers
%%================================

'enc_Customer_providers'({'Customer_providers',Val}, TagIn) ->
   'enc_Customer_providers'(Val, TagIn);

'enc_Customer_providers'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Customer_providers_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Customer_providers_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Customer_providers_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Provider'(H, []),
   'enc_Customer_providers_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Customer_providers'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Provider'/3, [], []).




'dec_Customer'(Bytes, OptOrMand) ->
   'dec_Customer'(Bytes, OptOrMand, []).

'dec_Customer'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_integer(Bytes5,[],[{tag,128,3,'IMPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type SEQUENCE OF
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = 'dec_Customer_allowedSources'(Bytes6, mandatory, [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6   External FunnelAsn:Addr OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_Addr'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type SEQUENCE OF
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = 'dec_Customer_networks'(Bytes8, mandatory, [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8 with type SEQUENCE OF
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = 'dec_Customer_providers'(Bytes9, mandatory, [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type IA5String OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes10,[],22,[{tag,128,8,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

%%-------------------------------------------------
%% attribute number 10 with type BOOLEAN
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = ?RT_BER:decode_boolean(Bytes11,[{tag,128,9,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 11 with type BOOLEAN
%%-------------------------------------------------
   {Term11,Bytes13,Rb12} = ?RT_BER:decode_boolean(Bytes12,[{tag,128,10,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 12 with type IA5String
%%-------------------------------------------------
   {Term12,Bytes14,Rb13} = ?RT_BER:decode_restricted_string(Bytes13,[],22,[{tag,128,11,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 13 with type INTEGER
%%-------------------------------------------------
   {Term13,Bytes15,Rb14} = ?RT_BER:decode_integer(Bytes14,[],[{tag,128,12,'IMPLICIT',32}], mandatory),

   {Bytes16,Rb15} = ?RT_BER:restbytes2(RemBytes, Bytes15,noext),
   {{'Customer', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}, Bytes16, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12+Rb13+Rb14+Rb15}.


%%================================
%%  Provider
%%================================
'enc_Provider'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,gateway), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,bulkGateway), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,receiptsSupported), [{tag,128,3,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Provider'(Bytes, OptOrMand) ->
   'dec_Provider'(Bytes, OptOrMand, []).

'dec_Provider'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',32}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'Provider', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  Network
%%================================
'enc_Network'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,countryCode), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,numbersLen), [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_Network_prefixes'(?RT_BER:cindex(5,Val,prefixes), [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type IA5String
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(6,Val,providerId), 22, [{tag,128,4,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Network_prefixes
%%================================

'enc_Network_prefixes'({'Network_prefixes',Val}, TagIn) ->
   'enc_Network_prefixes'(Val, TagIn);

'enc_Network_prefixes'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Network_prefixes_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Network_prefixes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Network_prefixes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 22, []),
   'enc_Network_prefixes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Network_prefixes'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_restricted_string(FBytes,[],22,[], no_length, mandatory)
end, [], []).




'dec_Network'(Bytes, OptOrMand) ->
   'dec_Network'(Bytes, OptOrMand, []).

'dec_Network'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_Network_prefixes'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type IA5String
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_restricted_string(Bytes6,[],22,[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'Network', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  DisconnectRequest
%%================================
'enc_DisconnectRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,customerId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,userId), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,connectionId) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,connectionId), 22, [{tag,128,2,'IMPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DisconnectRequest'(Bytes, OptOrMand) ->
   'dec_DisconnectRequest'(Bytes, OptOrMand, []).

'dec_DisconnectRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'DisconnectRequest', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  DisconnectResponse
%%================================
'enc_DisconnectResponse'(_Val, TagIn) ->

   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DisconnectResponse'(Bytes, OptOrMand) ->
   'dec_DisconnectResponse'(Bytes, OptOrMand, []).

'dec_DisconnectResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'DisconnectResponse'}, Bytes1,
    Rb1}.


%%================================
%%  ConnectionsRequest
%%================================
'enc_ConnectionsRequest'(_Val, TagIn) ->

   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ConnectionsRequest'(Bytes, OptOrMand) ->
   'dec_ConnectionsRequest'(Bytes, OptOrMand, []).

'dec_ConnectionsRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'ConnectionsRequest'}, Bytes1,
    Rb1}.


%%================================
%%  ConnectionsResponse
%%================================
'enc_ConnectionsResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConnectionsResponse_connections'(?RT_BER:cindex(2,Val,connections), [{tag,128,0,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ConnectionsResponse_connections
%%================================

'enc_ConnectionsResponse_connections'({'ConnectionsResponse_connections',Val}, TagIn) ->
   'enc_ConnectionsResponse_connections'(Val, TagIn);

'enc_ConnectionsResponse_connections'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConnectionsResponse_connections_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ConnectionsResponse_connections_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConnectionsResponse_connections_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Connection'(H, []),
   'enc_ConnectionsResponse_connections_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ConnectionsResponse_connections'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Connection'/3, [], []).




'dec_ConnectionsResponse'(Bytes, OptOrMand) ->
   'dec_ConnectionsResponse'(Bytes, OptOrMand, []).

'dec_ConnectionsResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ConnectionsResponse_connections'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ConnectionsResponse', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  ThroughputRequest
%%================================
'enc_ThroughputRequest'(_Val, TagIn) ->

   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ThroughputRequest'(Bytes, OptOrMand) ->
   'dec_ThroughputRequest'(Bytes, OptOrMand, []).

'dec_ThroughputRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'ThroughputRequest'}, Bytes1,
    Rb1}.


%%================================
%%  ThroughputResponse
%%================================
'enc_ThroughputResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThroughputResponse_slices'(?RT_BER:cindex(2,Val,slices), [{tag,128,0,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ThroughputResponse_slices
%%================================

'enc_ThroughputResponse_slices'({'ThroughputResponse_slices',Val}, TagIn) ->
   'enc_ThroughputResponse_slices'(Val, TagIn);

'enc_ThroughputResponse_slices'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ThroughputResponse_slices_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ThroughputResponse_slices_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ThroughputResponse_slices_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Slice'(H, []),
   'enc_ThroughputResponse_slices_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ThroughputResponse_slices'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Slice'/3, [], []).




'dec_ThroughputResponse'(Bytes, OptOrMand) ->
   'dec_ThroughputResponse'(Bytes, OptOrMand, []).

'dec_ThroughputResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ThroughputResponse_slices'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ThroughputResponse', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  Slice
%%================================
'enc_Slice'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(2,Val,periodStart), [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Slice_counters'(?RT_BER:cindex(3,Val,counters), [{tag,128,1,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Slice_counters
%%================================

'enc_Slice_counters'({'Slice_counters',Val}, TagIn) ->
   'enc_Slice_counters'(Val, TagIn);

'enc_Slice_counters'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Slice_counters_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Slice_counters_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Slice_counters_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Counter'(H, []),
   'enc_Slice_counters_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Slice_counters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Counter'/3, [], []).




'dec_Slice'(Bytes, OptOrMand) ->
   'dec_Slice'(Bytes, OptOrMand, []).

'dec_Slice'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_utc_time(Bytes2,[],[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_Slice_counters'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'Slice', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  Counter
%%================================
'enc_Counter'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,connectionId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,direction) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,direction) end) of
in -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',32}]);
out -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',32}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,count), [{tag,128,2,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Counter'(Bytes, OptOrMand) ->
   'dec_Counter'(Bytes, OptOrMand, []).

'dec_Counter'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{in,0},{out,1}],[{tag,128,1,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'Counter', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  Connection
%%================================
'enc_Connection'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,connectionId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,remoteIp), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,customerId), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type IA5String
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(5,Val,userId), 22, [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(6,Val,connectedAt), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case (case ?RT_BER:cindex(7,Val,type) of {_,Enumval6}->Enumval6;_->?RT_BER:cindex(7,Val,type) end) of
transmitter -> ?RT_BER:encode_enumerated(0,[{tag,128,5,'IMPLICIT',32}]);
receiver -> ?RT_BER:encode_enumerated(1,[{tag,128,5,'IMPLICIT',32}]);
transceiver -> ?RT_BER:encode_enumerated(2,[{tag,128,5,'IMPLICIT',32}]);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,msgsReceived), [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8 with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_integer([], ?RT_BER:cindex(9,Val,msgsSent), [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_Connection_errors'(?RT_BER:cindex(10,Val,errors), [{tag,128,8,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Connection_errors
%%================================

'enc_Connection_errors'({'Connection_errors',Val}, TagIn) ->
   'enc_Connection_errors'(Val, TagIn);

'enc_Connection_errors'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Connection_errors_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_Connection_errors_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Connection_errors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Error'(H, []),
   'enc_Connection_errors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Connection_errors'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Error'/3, [], []).




'dec_Connection'(Bytes, OptOrMand) ->
   'dec_Connection'(Bytes, OptOrMand, []).

'dec_Connection'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type IA5String
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_restricted_string(Bytes5,[],22,[{tag,128,3,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_utc_time(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_enumerated(Bytes7,[],[{transmitter,0},{receiver,1},{transceiver,2}],[{tag,128,5,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_integer(Bytes8,[],[{tag,128,6,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type INTEGER
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = ?RT_BER:decode_integer(Bytes9,[],[{tag,128,7,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 9 with type SEQUENCE OF
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = 'dec_Connection_errors'(Bytes10, mandatory, [{tag,128,8,'IMPLICIT',32}]),

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'Connection', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


%%================================
%%  ServerUpEvent
%%================================
'enc_ServerUpEvent'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(2,Val,timestamp), [{tag,128,0,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ServerUpEvent'(Bytes, OptOrMand) ->
   'dec_ServerUpEvent'(Bytes, OptOrMand, []).

'dec_ServerUpEvent'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_utc_time(Bytes2,[],[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ServerUpEvent', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  ServerDownEvent
%%================================
'enc_ServerDownEvent'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(2,Val,timestamp), [{tag,128,0,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ServerDownEvent'(Bytes, OptOrMand) ->
   'dec_ServerDownEvent'(Bytes, OptOrMand, []).

'dec_ServerDownEvent'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type UTCTime
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_utc_time(Bytes2,[],[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ServerDownEvent', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  ConnectionUpEvent
%%================================
'enc_ConnectionUpEvent'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,connectionId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,customerId), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,userId), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,type) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(5,Val,type) end) of
transmitter -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',32}]);
receiver -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',32}]);
transceiver -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',32}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(6,Val,connectedAt), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6 with type UTCTime
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(7,Val,timestamp), [{tag,128,5,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ConnectionUpEvent'(Bytes, OptOrMand) ->
   'dec_ConnectionUpEvent'(Bytes, OptOrMand, []).

'dec_ConnectionUpEvent'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{transmitter,0},{receiver,1},{transceiver,2}],[{tag,128,3,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_utc_time(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 6 with type UTCTime
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_utc_time(Bytes7,[],[{tag,128,5,'IMPLICIT',32}], no_length, mandatory),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,noext),
   {{'ConnectionUpEvent', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  ConnectionDownEvent
%%================================
'enc_ConnectionDownEvent'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,connectionId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,customerId), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,userId), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,type) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(5,Val,type) end) of
transmitter -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',32}]);
receiver -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',32}]);
transceiver -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',32}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(6,Val,connectedAt), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,msgsReceived), [{tag,128,5,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,msgsSent), [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_ConnectionDownEvent_errors'(?RT_BER:cindex(9,Val,errors), [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes9,EncLen9} = case (case ?RT_BER:cindex(10,Val,reason) of {_,Enumval9}->Enumval9;_->?RT_BER:cindex(10,Val,reason) end) of
normal -> ?RT_BER:encode_enumerated(0,[{tag,128,8,'IMPLICIT',32}]);
closed -> ?RT_BER:encode_enumerated(1,[{tag,128,8,'IMPLICIT',32}]);
unbound -> ?RT_BER:encode_enumerated(2,[{tag,128,8,'IMPLICIT',32}]);
other -> ?RT_BER:encode_enumerated(3,[{tag,128,8,'IMPLICIT',32}]);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end,

%%-------------------------------------------------
%% attribute number 10 with type UTCTime
%%-------------------------------------------------
   {EncBytes10,EncLen10} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(11,Val,timestamp), [{tag,128,9,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ConnectionDownEvent_errors
%%================================

'enc_ConnectionDownEvent_errors'({'ConnectionDownEvent_errors',Val}, TagIn) ->
   'enc_ConnectionDownEvent_errors'(Val, TagIn);

'enc_ConnectionDownEvent_errors'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConnectionDownEvent_errors_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ConnectionDownEvent_errors_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConnectionDownEvent_errors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Error'(H, []),
   'enc_ConnectionDownEvent_errors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ConnectionDownEvent_errors'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Error'/3, [], []).




'dec_ConnectionDownEvent'(Bytes, OptOrMand) ->
   'dec_ConnectionDownEvent'(Bytes, OptOrMand, []).

'dec_ConnectionDownEvent'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{transmitter,0},{receiver,1},{transceiver,2}],[{tag,128,3,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_utc_time(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_integer(Bytes7,[],[{tag,128,5,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_integer(Bytes8,[],[{tag,128,6,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type SEQUENCE OF
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = 'dec_ConnectionDownEvent_errors'(Bytes9, mandatory, [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type ENUMERATED
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = ?RT_BER:decode_enumerated(Bytes10,[],[{normal,0},{closed,1},{unbound,2},{other,3}],[{tag,128,8,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 10 with type UTCTime
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = ?RT_BER:decode_utc_time(Bytes11,[],[{tag,128,9,'IMPLICIT',32}], no_length, mandatory),

   {Bytes13,Rb12} = ?RT_BER:restbytes2(RemBytes, Bytes12,noext),
   {{'ConnectionDownEvent', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}, Bytes13, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12}.


%%================================
%%  Error
%%================================
'enc_Error'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,errorCode), [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type UTCTime
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(3,Val,timestamp), [{tag,128,1,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Error'(Bytes, OptOrMand) ->
   'dec_Error'(Bytes, OptOrMand, []).

'dec_Error'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,[],[{tag,128,0,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type UTCTime
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_utc_time(Bytes3,[],[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'Error', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  OutgoingBatch
%%================================
'enc_OutgoingBatch'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_OutgoingBatch_messages'(?RT_BER:cindex(3,Val,messages), [{tag,128,1,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  OutgoingBatch_messages
%%================================

'enc_OutgoingBatch_messages'({'OutgoingBatch_messages',Val}, TagIn) ->
   'enc_OutgoingBatch_messages'(Val, TagIn);

'enc_OutgoingBatch_messages'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_OutgoingBatch_messages_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_OutgoingBatch_messages_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_OutgoingBatch_messages_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_OutgoingMessage'(H, []),
   'enc_OutgoingBatch_messages_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_OutgoingBatch_messages'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_OutgoingMessage'/3, [], []).




'dec_OutgoingBatch'(Bytes, OptOrMand) ->
   'dec_OutgoingBatch'(Bytes, OptOrMand, []).

'dec_OutgoingBatch'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_OutgoingBatch_messages'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'OutgoingBatch', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  OutgoingMessage
%%================================
'enc_OutgoingMessage'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Addr'(?RT_BER:cindex(2,Val,source), [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Addr'(?RT_BER:cindex(3,Val,dest), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,message), [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_OutgoingMessage_dataCoding'(?RT_BER:cindex(5,Val,dataCoding), [{tag,128,3,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  OutgoingMessage_dataCoding
%%================================

'enc_OutgoingMessage_dataCoding'({'OutgoingMessage_dataCoding',Val}, TagIn) ->
   'enc_OutgoingMessage_dataCoding'(Val, TagIn);

'enc_OutgoingMessage_dataCoding'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      text ->
         case (case element(2,Val) of {_,Enumval1}->Enumval1;_->element(2,Val) end) of
gsm0338 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',32}]);
ucs2 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',32}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      other ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_OutgoingMessage_dataCoding'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'text'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_enumerated(Bytes1,[],[{gsm0338,0},{ucs2,8}],[{tag,128,0,'IMPLICIT',32}], mandatory),
         {{text, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'other'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,[],[{tag,128,1,'IMPLICIT',32}], mandatory),
         {{other, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_OutgoingMessage'(Bytes, OptOrMand) ->
   'dec_OutgoingMessage'(Bytes, OptOrMand, []).

'dec_OutgoingMessage'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External FunnelAsn:Addr
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_Addr'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2   External FunnelAsn:Addr
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_Addr'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_octet_string(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type CHOICE
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_OutgoingMessage_dataCoding'(Bytes5, mandatory, [{tag,128,3,'EXPLICIT',32}]),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'OutgoingMessage', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  ReceiptBatch
%%================================
'enc_ReceiptBatch'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReceiptBatch_receipts'(?RT_BER:cindex(3,Val,receipts), [{tag,128,1,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReceiptBatch_receipts
%%================================

'enc_ReceiptBatch_receipts'({'ReceiptBatch_receipts',Val}, TagIn) ->
   'enc_ReceiptBatch_receipts'(Val, TagIn);

'enc_ReceiptBatch_receipts'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ReceiptBatch_receipts_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ReceiptBatch_receipts_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReceiptBatch_receipts_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DeliveryReceipt'(H, []),
   'enc_ReceiptBatch_receipts_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ReceiptBatch_receipts'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_DeliveryReceipt'/3, [], []).




'dec_ReceiptBatch'(Bytes, OptOrMand) ->
   'dec_ReceiptBatch'(Bytes, OptOrMand, []).

'dec_ReceiptBatch'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_ReceiptBatch_receipts'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ReceiptBatch', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  DeliveryReceipt
%%================================
'enc_DeliveryReceipt'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,messageId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type UTCTime
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(3,Val,submitDate), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type UTCTime
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(4,Val,doneDate), [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,messageState) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(5,Val,messageState) end) of
delivered -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',32}]);
expired -> ?RT_BER:encode_enumerated(3,[{tag,128,3,'IMPLICIT',32}]);
deleted -> ?RT_BER:encode_enumerated(4,[{tag,128,3,'IMPLICIT',32}]);
undeliverable -> ?RT_BER:encode_enumerated(5,[{tag,128,3,'IMPLICIT',32}]);
accepted -> ?RT_BER:encode_enumerated(6,[{tag,128,3,'IMPLICIT',32}]);
unknown -> ?RT_BER:encode_enumerated(7,[{tag,128,3,'IMPLICIT',32}]);
rejected -> ?RT_BER:encode_enumerated(8,[{tag,128,3,'IMPLICIT',32}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute number 5   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_Addr'(?RT_BER:cindex(6,Val,source), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_Addr'(?RT_BER:cindex(7,Val,dest), [{tag,128,5,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DeliveryReceipt'(Bytes, OptOrMand) ->
   'dec_DeliveryReceipt'(Bytes, OptOrMand, []).

'dec_DeliveryReceipt'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type UTCTime
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_utc_time(Bytes3,[],[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type UTCTime
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_utc_time(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{delivered,2},{expired,3},{deleted,4},{undeliverable,5},{accepted,6},{unknown,7},{rejected,8}],[{tag,128,3,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 5   External FunnelAsn:Addr
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = 'dec_Addr'(Bytes6, mandatory, [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6   External FunnelAsn:Addr
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = 'dec_Addr'(Bytes7, mandatory, [{tag,128,5,'IMPLICIT',32}]),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,noext),
   {{'DeliveryReceipt', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  BatchAck
%%================================
'enc_BatchAck'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,batchId), 22, [{tag,128,0,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BatchAck'(Bytes, OptOrMand) ->
   'dec_BatchAck'(Bytes, OptOrMand, []).

'dec_BatchAck'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'BatchAck', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  Addr
%%================================
'enc_Addr'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,addr), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,ton), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,npi), [{tag,128,2,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Addr'(Bytes, OptOrMand) ->
   'dec_Addr'(Bytes, OptOrMand, []).

'dec_Addr'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,[],[{tag,128,1,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'Addr', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.
