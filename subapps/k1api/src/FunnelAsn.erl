%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.7
%% Purpose: encoder and decoder to the types in mod FunnelAsn

-module('FunnelAsn').
-include("FunnelAsn.hrl").
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.7'},
            {module,'FunnelAsn'},
            {options,[{i,[115,114,99]},ber_bin_v2,{outdir,[115,114,99]},noobj,optimize,asn1config,{i,[46]},{i,[97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_BindRequest'/2,
'enc_PreciseTime'/2,
'enc_BindResponse'/2,
'enc_Customer'/2,
'enc_Provider'/2,
'enc_Network'/2,
'enc_DisconnectRequest'/2,
'enc_DisconnectResponse'/2,
'enc_ConnectionsRequest'/2,
'enc_ConnectionsResponse'/2,
'enc_ThroughputRequest'/2,
'enc_ThroughputResponse'/2,
'enc_Slice'/2,
'enc_Counter'/2,
'enc_Connection'/2,
'enc_ServerUpEvent'/2,
'enc_ServerDownEvent'/2,
'enc_ConnectionUpEvent'/2,
'enc_ConnectionDownEvent'/2,
'enc_Error'/2,
'enc_OutgoingBatch'/2,
'enc_OutgoingMessage'/2,
'enc_ReceiptBatch'/2,
'enc_DeliveryReceipt'/2,
'enc_BatchAck'/2,
'enc_Addr'/2
]).

-export([
'dec_BindRequest'/2,
'dec_PreciseTime'/2,
'dec_BindResponse'/2,
'dec_Customer'/2,
'dec_Provider'/2,
'dec_Network'/2,
'dec_DisconnectRequest'/2,
'dec_DisconnectResponse'/2,
'dec_ConnectionsRequest'/2,
'dec_ConnectionsResponse'/2,
'dec_ThroughputRequest'/2,
'dec_ThroughputResponse'/2,
'dec_Slice'/2,
'dec_Counter'/2,
'dec_Connection'/2,
'dec_ServerUpEvent'/2,
'dec_ServerDownEvent'/2,
'dec_ConnectionUpEvent'/2,
'dec_ConnectionDownEvent'/2,
'dec_Error'/2,
'dec_OutgoingBatch'/2,
'dec_OutgoingMessage'/2,
'dec_ReceiptBatch'/2,
'dec_DeliveryReceipt'/2,
'dec_BatchAck'/2,
'dec_Addr'/2
]).

-export([info/0]).
-export([outgoing_batch_messages/1, receipt_batch_messages/1]).
-export([decode_part/2]).
-export([outgoing_batch_id/1,
          receipt_batch_id/1]).



-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

decode_partial_incomplete(Type,Data0,Pattern) ->
  {Data,_RestBin} =
    ?RT_BER:decode_primitive_incomplete(Pattern,Data0),
  case catch decode_partial_inc_disp(Type,Data) of
   {'EXIT',{error,Reason}} ->
      {error,Reason};
    {'EXIT',Reason} ->
      {error,{asn1,Reason}};
    Result ->
      {ok,Result}
  end.

decode_part(Type,Data0) ->
  case catch decode_inc_disp(Type,element(1,?RT_BER:decode(Data0))) of
   {'EXIT',{error,Reason}} ->
      {error,Reason};
    {'EXIT',Reason} ->
      {error,{asn1,Reason}};
    Result ->
      {ok,Result}
  end.

encode_disp('BindRequest',Data) -> 'enc_BindRequest'(Data);
encode_disp('PreciseTime',Data) -> 'enc_PreciseTime'(Data);
encode_disp('BindResponse',Data) -> 'enc_BindResponse'(Data);
encode_disp('Customer',Data) -> 'enc_Customer'(Data);
encode_disp('Provider',Data) -> 'enc_Provider'(Data);
encode_disp('Network',Data) -> 'enc_Network'(Data);
encode_disp('DisconnectRequest',Data) -> 'enc_DisconnectRequest'(Data);
encode_disp('DisconnectResponse',Data) -> 'enc_DisconnectResponse'(Data);
encode_disp('ConnectionsRequest',Data) -> 'enc_ConnectionsRequest'(Data);
encode_disp('ConnectionsResponse',Data) -> 'enc_ConnectionsResponse'(Data);
encode_disp('ThroughputRequest',Data) -> 'enc_ThroughputRequest'(Data);
encode_disp('ThroughputResponse',Data) -> 'enc_ThroughputResponse'(Data);
encode_disp('Slice',Data) -> 'enc_Slice'(Data);
encode_disp('Counter',Data) -> 'enc_Counter'(Data);
encode_disp('Connection',Data) -> 'enc_Connection'(Data);
encode_disp('ServerUpEvent',Data) -> 'enc_ServerUpEvent'(Data);
encode_disp('ServerDownEvent',Data) -> 'enc_ServerDownEvent'(Data);
encode_disp('ConnectionUpEvent',Data) -> 'enc_ConnectionUpEvent'(Data);
encode_disp('ConnectionDownEvent',Data) -> 'enc_ConnectionDownEvent'(Data);
encode_disp('Error',Data) -> 'enc_Error'(Data);
encode_disp('OutgoingBatch',Data) -> 'enc_OutgoingBatch'(Data);
encode_disp('OutgoingMessage',Data) -> 'enc_OutgoingMessage'(Data);
encode_disp('ReceiptBatch',Data) -> 'enc_ReceiptBatch'(Data);
encode_disp('DeliveryReceipt',Data) -> 'enc_DeliveryReceipt'(Data);
encode_disp('BatchAck',Data) -> 'enc_BatchAck'(Data);
encode_disp('Addr',Data) -> 'enc_Addr'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('BindRequest',Data) -> 'dec_BindRequest'(Data);
decode_disp('PreciseTime',Data) -> 'dec_PreciseTime'(Data);
decode_disp('BindResponse',Data) -> 'dec_BindResponse'(Data);
decode_disp('Customer',Data) -> 'dec_Customer'(Data);
decode_disp('Provider',Data) -> 'dec_Provider'(Data);
decode_disp('Network',Data) -> 'dec_Network'(Data);
decode_disp('DisconnectRequest',Data) -> 'dec_DisconnectRequest'(Data);
decode_disp('DisconnectResponse',Data) -> 'dec_DisconnectResponse'(Data);
decode_disp('ConnectionsRequest',Data) -> 'dec_ConnectionsRequest'(Data);
decode_disp('ConnectionsResponse',Data) -> 'dec_ConnectionsResponse'(Data);
decode_disp('ThroughputRequest',Data) -> 'dec_ThroughputRequest'(Data);
decode_disp('ThroughputResponse',Data) -> 'dec_ThroughputResponse'(Data);
decode_disp('Slice',Data) -> 'dec_Slice'(Data);
decode_disp('Counter',Data) -> 'dec_Counter'(Data);
decode_disp('Connection',Data) -> 'dec_Connection'(Data);
decode_disp('ServerUpEvent',Data) -> 'dec_ServerUpEvent'(Data);
decode_disp('ServerDownEvent',Data) -> 'dec_ServerDownEvent'(Data);
decode_disp('ConnectionUpEvent',Data) -> 'dec_ConnectionUpEvent'(Data);
decode_disp('ConnectionDownEvent',Data) -> 'dec_ConnectionDownEvent'(Data);
decode_disp('Error',Data) -> 'dec_Error'(Data);
decode_disp('OutgoingBatch',Data) -> 'dec_OutgoingBatch'(Data);
decode_disp('OutgoingMessage',Data) -> 'dec_OutgoingMessage'(Data);
decode_disp('ReceiptBatch',Data) -> 'dec_ReceiptBatch'(Data);
decode_disp('DeliveryReceipt',Data) -> 'dec_DeliveryReceipt'(Data);
decode_disp('BatchAck',Data) -> 'dec_BatchAck'(Data);
decode_disp('Addr',Data) -> 'dec_Addr'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_partial_inc_disp('OutgoingBatch',Data) ->
  'dec-inc-OutgoingBatch'(Data);
decode_partial_inc_disp('ReceiptBatch',Data) ->
  'dec-inc-ReceiptBatch'(Data);
decode_partial_inc_disp(Type,_Data) ->
  exit({error,{asn1,{undefined_type,Type}}}).



info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  BindRequest
%%================================
'enc_BindRequest'(Val) ->
    'enc_BindRequest'(Val, [<<48>>]).

'enc_BindRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute remoteIp(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute userId(4) with type IA5String
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_restricted_string([], Cindex4, 22, [<<131>>]),

%%-------------------------------------------------
%% attribute password(5) with type IA5String
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_restricted_string([], Cindex5, 22, [<<132>>]),

%%-------------------------------------------------
%% attribute type(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
transmitter -> ?RT_BER:encode_enumerated(0,[<<133>>]);
receiver -> ?RT_BER:encode_enumerated(1,[<<133>>]);
transceiver -> ?RT_BER:encode_enumerated(2,[<<133>>]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute isCached(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute timestamp(8)   External FunnelAsn:PreciseTime
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_PreciseTime'(Cindex8, [<<167>>]),

%%-------------------------------------------------
%% attribute expiration(9)   External FunnelAsn:PreciseTime
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_PreciseTime'(Cindex9, [<<168>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BindRequest'(Tlv) ->
   'dec_BindRequest'(Tlv, [16]).

'dec_BindRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute remoteIp(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute userId(4) with type IA5String
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_restricted_string(V4,[],22,[131075]),

%%-------------------------------------------------
%% attribute password(5) with type IA5String
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_restricted_string(V5,[],22,[131076]),

%%-------------------------------------------------
%% attribute type(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_enumerated(V6,[],[{transmitter,0},{receiver,1},{transceiver,2}],[131077]),

%%-------------------------------------------------
%% attribute isCached(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = ?RT_BER:decode_boolean(V7,[131078]),

%%-------------------------------------------------
%% attribute timestamp(8)   External FunnelAsn:PreciseTime
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_PreciseTime'(V8, [131079]),

%%-------------------------------------------------
%% attribute expiration(9)   External FunnelAsn:PreciseTime
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = 'dec_PreciseTime'(V9, [131080]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'BindRequest', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  PreciseTime
%%================================
'enc_PreciseTime'(Val) ->
    'enc_PreciseTime'(Val, [<<48>>]).

'enc_PreciseTime'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute time(1) with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute milliseconds(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PreciseTime'(Tlv) ->
   'dec_PreciseTime'(Tlv, [16]).

'dec_PreciseTime'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute time(1) with type UTCTime
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_utc_time(V1,[],[131072]),

%%-------------------------------------------------
%% attribute milliseconds(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PreciseTime', Term1, Term2}.



%%================================
%%  BindResponse
%%================================
'enc_BindResponse'(Val) ->
    'enc_BindResponse'(Val, [<<48>>]).

'enc_BindResponse'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute result(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_BindResponse_result'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  BindResponse_result
%%================================

'enc_BindResponse_result'({'BindResponse_result',Val}, TagIn) ->
   'enc_BindResponse_result'(Val, TagIn);

'enc_BindResponse_result'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      customer ->
         'enc_Customer'(element(2,Val), [<<160>>]);
      error ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).


'dec_BindResponse_result'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'customer'
    {131072, V1} -> 
        {customer, 'dec_Customer'(V1, [])};


%% 'error'
    {131073, V1} -> 
        {error, ?RT_BER:decode_restricted_string(V1,[],22,[])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_BindResponse'(Tlv) ->
   'dec_BindResponse'(Tlv, [16]).

'dec_BindResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute result(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_BindResponse_result'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'BindResponse', Term1, Term2}.



%%================================
%%  Customer
%%================================
'enc_Customer'(Val) ->
    'enc_Customer'(Val, [<<48>>]).

'enc_Customer'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute uuid(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute priority(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute rps(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute allowedSources(5) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_Customer_allowedSources'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute defaultSource(6)   External FunnelAsn:Addr OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Addr'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute networks(7) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_Customer_networks'(Cindex7, [<<166>>]),

%%-------------------------------------------------
%% attribute providers(8) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_Customer_providers'(Cindex8, [<<167>>]),

%%-------------------------------------------------
%% attribute defaultProviderId(9) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], Cindex9, 22, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute receiptsAllowed(10) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes10,EncLen10} = ?RT_BER:encode_boolean(Cindex10, [<<137>>]),

%%-------------------------------------------------
%% attribute noRetry(11) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes11,EncLen11} = ?RT_BER:encode_boolean(Cindex11, [<<138>>]),

%%-------------------------------------------------
%% attribute defaultValidity(12) with type IA5String
%%-------------------------------------------------
   {EncBytes12,EncLen12} = ?RT_BER:encode_restricted_string([], Cindex12, 22, [<<139>>]),

%%-------------------------------------------------
%% attribute maxValidity(13) with type INTEGER
%%-------------------------------------------------
   {EncBytes13,EncLen13} = ?RT_BER:encode_integer([], Cindex13, [<<140>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Customer_allowedSources
%%================================

'enc_Customer_allowedSources'({'Customer_allowedSources',Val}, TagIn) ->
   'enc_Customer_allowedSources'(Val, TagIn);

'enc_Customer_allowedSources'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Customer_allowedSources_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_Customer_allowedSources_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Customer_allowedSources_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Addr'(H, [<<48>>]),
   'enc_Customer_allowedSources_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Customer_allowedSources'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Addr'(V1, [16]) || V1 <- Tlv1].





%%================================
%%  Customer_networks
%%================================

'enc_Customer_networks'({'Customer_networks',Val}, TagIn) ->
   'enc_Customer_networks'(Val, TagIn);

'enc_Customer_networks'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Customer_networks_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_Customer_networks_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Customer_networks_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Network'(H, [<<48>>]),
   'enc_Customer_networks_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Customer_networks'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Network'(V1, [16]) || V1 <- Tlv1].





%%================================
%%  Customer_providers
%%================================

'enc_Customer_providers'({'Customer_providers',Val}, TagIn) ->
   'enc_Customer_providers'(Val, TagIn);

'enc_Customer_providers'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Customer_providers_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_Customer_providers_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Customer_providers_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Provider'(H, [<<48>>]),
   'enc_Customer_providers_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Customer_providers'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Provider'(V1, [16]) || V1 <- Tlv1].




'dec_Customer'(Tlv) ->
   'dec_Customer'(Tlv, [16]).

'dec_Customer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute uuid(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute priority(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_integer(V3,[],[131074]),

%%-------------------------------------------------
%% attribute rps(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {?RT_BER:decode_integer(V4,[],[]), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute allowedSources(5) with type SEQUENCE OF
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_Customer_allowedSources'(V5, [131076]),

%%-------------------------------------------------
%% attribute defaultSource(6)   External FunnelAsn:Addr OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_Addr'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute networks(7) with type SEQUENCE OF
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = 'dec_Customer_networks'(V7, [131078]),

%%-------------------------------------------------
%% attribute providers(8) with type SEQUENCE OF
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_Customer_providers'(V8, [131079]),

%%-------------------------------------------------
%% attribute defaultProviderId(9) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {?RT_BER:decode_restricted_string(V9,[],22,[]), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute receiptsAllowed(10) with type BOOLEAN
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = ?RT_BER:decode_boolean(V10,[131081]),

%%-------------------------------------------------
%% attribute noRetry(11) with type BOOLEAN
%%-------------------------------------------------
[V11|Tlv12] = Tlv11, 
Term11 = ?RT_BER:decode_boolean(V11,[131082]),

%%-------------------------------------------------
%% attribute defaultValidity(12) with type IA5String
%%-------------------------------------------------
[V12|Tlv13] = Tlv12, 
Term12 = ?RT_BER:decode_restricted_string(V12,[],22,[131083]),

%%-------------------------------------------------
%% attribute maxValidity(13) with type INTEGER
%%-------------------------------------------------
[V13|Tlv14] = Tlv13, 
Term13 = ?RT_BER:decode_integer(V13,[],[131084]),

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'Customer', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.



%%================================
%%  Provider
%%================================
'enc_Provider'(Val) ->
    'enc_Provider'(Val, [<<48>>]).

'enc_Provider'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute gateway(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute bulkGateway(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute receiptsSupported(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Provider'(Tlv) ->
   'dec_Provider'(Tlv, [16]).

'dec_Provider'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute gateway(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute bulkGateway(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute receiptsSupported(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_boolean(V4,[131075]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Provider', Term1, Term2, Term3, Term4}.



%%================================
%%  Network
%%================================
'enc_Network'(Val) ->
    'enc_Network'(Val, [<<48>>]).

'enc_Network'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute countryCode(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute numbersLen(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute prefixes(4) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_Network_prefixes'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute providerId(5) with type IA5String
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_restricted_string([], Cindex5, 22, [<<132>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Network_prefixes
%%================================

'enc_Network_prefixes'({'Network_prefixes',Val}, TagIn) ->
   'enc_Network_prefixes'(Val, TagIn);

'enc_Network_prefixes'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Network_prefixes_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_Network_prefixes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Network_prefixes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 22, [<<22>>]),
   'enc_Network_prefixes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Network_prefixes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,[],22,[22]) || V1 <- Tlv1].




'dec_Network'(Tlv) ->
   'dec_Network'(Tlv, [16]).

'dec_Network'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute countryCode(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute numbersLen(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_integer(V3,[],[131074]),

%%-------------------------------------------------
%% attribute prefixes(4) with type SEQUENCE OF
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_Network_prefixes'(V4, [131075]),

%%-------------------------------------------------
%% attribute providerId(5) with type IA5String
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_restricted_string(V5,[],22,[131076]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'Network', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  DisconnectRequest
%%================================
'enc_DisconnectRequest'(Val) ->
    'enc_DisconnectRequest'(Val, [<<48>>]).

'enc_DisconnectRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute customerId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute userId(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute connectionId(3) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DisconnectRequest'(Tlv) ->
   'dec_DisconnectRequest'(Tlv, [16]).

'dec_DisconnectRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute customerId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute userId(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute connectionId(3) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {?RT_BER:decode_restricted_string(V3,[],22,[]), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'DisconnectRequest', Term1, Term2, Term3}.



%%================================
%%  DisconnectResponse
%%================================
'enc_DisconnectResponse'(Val) ->
    'enc_DisconnectResponse'(Val, [<<48>>]).

'enc_DisconnectResponse'(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DisconnectResponse'(Tlv) ->
   'dec_DisconnectResponse'(Tlv, [16]).

'dec_DisconnectResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
?RT_BER:match_tags(Tlv,TagIn), 


   {'DisconnectResponse'}.



%%================================
%%  ConnectionsRequest
%%================================
'enc_ConnectionsRequest'(Val) ->
    'enc_ConnectionsRequest'(Val, [<<48>>]).

'enc_ConnectionsRequest'(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConnectionsRequest'(Tlv) ->
   'dec_ConnectionsRequest'(Tlv, [16]).

'dec_ConnectionsRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
?RT_BER:match_tags(Tlv,TagIn), 


   {'ConnectionsRequest'}.



%%================================
%%  ConnectionsResponse
%%================================
'enc_ConnectionsResponse'(Val) ->
    'enc_ConnectionsResponse'(Val, [<<48>>]).

'enc_ConnectionsResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute connections(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConnectionsResponse_connections'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConnectionsResponse_connections
%%================================

'enc_ConnectionsResponse_connections'({'ConnectionsResponse_connections',Val}, TagIn) ->
   'enc_ConnectionsResponse_connections'(Val, TagIn);

'enc_ConnectionsResponse_connections'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConnectionsResponse_connections_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ConnectionsResponse_connections_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConnectionsResponse_connections_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Connection'(H, [<<48>>]),
   'enc_ConnectionsResponse_connections_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ConnectionsResponse_connections'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Connection'(V1, [16]) || V1 <- Tlv1].




'dec_ConnectionsResponse'(Tlv) ->
   'dec_ConnectionsResponse'(Tlv, [16]).

'dec_ConnectionsResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connections(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConnectionsResponse_connections'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ConnectionsResponse', Term1}.



%%================================
%%  ThroughputRequest
%%================================
'enc_ThroughputRequest'(Val) ->
    'enc_ThroughputRequest'(Val, [<<48>>]).

'enc_ThroughputRequest'(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ThroughputRequest'(Tlv) ->
   'dec_ThroughputRequest'(Tlv, [16]).

'dec_ThroughputRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
?RT_BER:match_tags(Tlv,TagIn), 


   {'ThroughputRequest'}.



%%================================
%%  ThroughputResponse
%%================================
'enc_ThroughputResponse'(Val) ->
    'enc_ThroughputResponse'(Val, [<<48>>]).

'enc_ThroughputResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute slices(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThroughputResponse_slices'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ThroughputResponse_slices
%%================================

'enc_ThroughputResponse_slices'({'ThroughputResponse_slices',Val}, TagIn) ->
   'enc_ThroughputResponse_slices'(Val, TagIn);

'enc_ThroughputResponse_slices'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ThroughputResponse_slices_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ThroughputResponse_slices_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ThroughputResponse_slices_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Slice'(H, [<<48>>]),
   'enc_ThroughputResponse_slices_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ThroughputResponse_slices'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Slice'(V1, [16]) || V1 <- Tlv1].




'dec_ThroughputResponse'(Tlv) ->
   'dec_ThroughputResponse'(Tlv, [16]).

'dec_ThroughputResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute slices(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ThroughputResponse_slices'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ThroughputResponse', Term1}.



%%================================
%%  Slice
%%================================
'enc_Slice'(Val) ->
    'enc_Slice'(Val, [<<48>>]).

'enc_Slice'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute periodStart(1) with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute counters(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Slice_counters'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Slice_counters
%%================================

'enc_Slice_counters'({'Slice_counters',Val}, TagIn) ->
   'enc_Slice_counters'(Val, TagIn);

'enc_Slice_counters'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Slice_counters_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_Slice_counters_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Slice_counters_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Counter'(H, [<<48>>]),
   'enc_Slice_counters_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Slice_counters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Counter'(V1, [16]) || V1 <- Tlv1].




'dec_Slice'(Tlv) ->
   'dec_Slice'(Tlv, [16]).

'dec_Slice'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute periodStart(1) with type UTCTime
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_utc_time(V1,[],[131072]),

%%-------------------------------------------------
%% attribute counters(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Slice_counters'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Slice', Term1, Term2}.



%%================================
%%  Counter
%%================================
'enc_Counter'(Val) ->
    'enc_Counter'(Val, [<<48>>]).

'enc_Counter'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute direction(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
in -> ?RT_BER:encode_enumerated(0,[<<129>>]);
out -> ?RT_BER:encode_enumerated(1,[<<129>>]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute count(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Counter'(Tlv) ->
   'dec_Counter'(Tlv, [16]).

'dec_Counter'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute direction(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_enumerated(V2,[],[{in,0},{out,1}],[131073]),

%%-------------------------------------------------
%% attribute count(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_integer(V3,[],[131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'Counter', Term1, Term2, Term3}.



%%================================
%%  Connection
%%================================
'enc_Connection'(Val) ->
    'enc_Connection'(Val, [<<48>>]).

'enc_Connection'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute remoteIp(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute userId(4) with type IA5String
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_restricted_string([], Cindex4, 22, [<<131>>]),

%%-------------------------------------------------
%% attribute connectedAt(5) with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute type(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
transmitter -> ?RT_BER:encode_enumerated(0,[<<133>>]);
receiver -> ?RT_BER:encode_enumerated(1,[<<133>>]);
transceiver -> ?RT_BER:encode_enumerated(2,[<<133>>]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute msgsReceived(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute msgsSent(8) with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_integer([], Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute errors(9) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_Connection_errors'(Cindex9, [<<168>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Connection_errors
%%================================

'enc_Connection_errors'({'Connection_errors',Val}, TagIn) ->
   'enc_Connection_errors'(Val, TagIn);

'enc_Connection_errors'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Connection_errors_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_Connection_errors_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Connection_errors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Error'(H, [<<48>>]),
   'enc_Connection_errors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Connection_errors'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Error'(V1, [16]) || V1 <- Tlv1].




'dec_Connection'(Tlv) ->
   'dec_Connection'(Tlv, [16]).

'dec_Connection'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute remoteIp(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute userId(4) with type IA5String
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_restricted_string(V4,[],22,[131075]),

%%-------------------------------------------------
%% attribute connectedAt(5) with type UTCTime
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_utc_time(V5,[],[131076]),

%%-------------------------------------------------
%% attribute type(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_enumerated(V6,[],[{transmitter,0},{receiver,1},{transceiver,2}],[131077]),

%%-------------------------------------------------
%% attribute msgsReceived(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = ?RT_BER:decode_integer(V7,[],[131078]),

%%-------------------------------------------------
%% attribute msgsSent(8) with type INTEGER
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = ?RT_BER:decode_integer(V8,[],[131079]),

%%-------------------------------------------------
%% attribute errors(9) with type SEQUENCE OF
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = 'dec_Connection_errors'(V9, [131080]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'Connection', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  ServerUpEvent
%%================================
'enc_ServerUpEvent'(Val) ->
    'enc_ServerUpEvent'(Val, [<<48>>]).

'enc_ServerUpEvent'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute timestamp(1) with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ServerUpEvent'(Tlv) ->
   'dec_ServerUpEvent'(Tlv, [16]).

'dec_ServerUpEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute timestamp(1) with type UTCTime
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_utc_time(V1,[],[131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ServerUpEvent', Term1}.



%%================================
%%  ServerDownEvent
%%================================
'enc_ServerDownEvent'(Val) ->
    'enc_ServerDownEvent'(Val, [<<48>>]).

'enc_ServerDownEvent'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute timestamp(1) with type UTCTime
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_utc_time([], Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ServerDownEvent'(Tlv) ->
   'dec_ServerDownEvent'(Tlv, [16]).

'dec_ServerDownEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute timestamp(1) with type UTCTime
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_utc_time(V1,[],[131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ServerDownEvent', Term1}.



%%================================
%%  ConnectionUpEvent
%%================================
'enc_ConnectionUpEvent'(Val) ->
    'enc_ConnectionUpEvent'(Val, [<<48>>]).

'enc_ConnectionUpEvent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute customerId(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute userId(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
transmitter -> ?RT_BER:encode_enumerated(0,[<<131>>]);
receiver -> ?RT_BER:encode_enumerated(1,[<<131>>]);
transceiver -> ?RT_BER:encode_enumerated(2,[<<131>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute connectedAt(5) with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute timestamp(6) with type UTCTime
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_utc_time([], Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConnectionUpEvent'(Tlv) ->
   'dec_ConnectionUpEvent'(Tlv, [16]).

'dec_ConnectionUpEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute customerId(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute userId(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_enumerated(V4,[],[{transmitter,0},{receiver,1},{transceiver,2}],[131075]),

%%-------------------------------------------------
%% attribute connectedAt(5) with type UTCTime
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_utc_time(V5,[],[131076]),

%%-------------------------------------------------
%% attribute timestamp(6) with type UTCTime
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_utc_time(V6,[],[131077]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'ConnectionUpEvent', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  ConnectionDownEvent
%%================================
'enc_ConnectionDownEvent'(Val) ->
    'enc_ConnectionDownEvent'(Val, [<<48>>]).

'enc_ConnectionDownEvent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute customerId(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute userId(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
transmitter -> ?RT_BER:encode_enumerated(0,[<<131>>]);
receiver -> ?RT_BER:encode_enumerated(1,[<<131>>]);
transceiver -> ?RT_BER:encode_enumerated(2,[<<131>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute connectedAt(5) with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute msgsReceived(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute msgsSent(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute errors(8) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_ConnectionDownEvent_errors'(Cindex8, [<<167>>]),

%%-------------------------------------------------
%% attribute reason(9) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes9,EncLen9} = case Cindex9 of
normal -> ?RT_BER:encode_enumerated(0,[<<136>>]);
closed -> ?RT_BER:encode_enumerated(1,[<<136>>]);
unbound -> ?RT_BER:encode_enumerated(2,[<<136>>]);
other -> ?RT_BER:encode_enumerated(3,[<<136>>]);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute timestamp(10) with type UTCTime
%%-------------------------------------------------
   {EncBytes10,EncLen10} = ?RT_BER:encode_utc_time([], Cindex10, [<<137>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConnectionDownEvent_errors
%%================================

'enc_ConnectionDownEvent_errors'({'ConnectionDownEvent_errors',Val}, TagIn) ->
   'enc_ConnectionDownEvent_errors'(Val, TagIn);

'enc_ConnectionDownEvent_errors'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ConnectionDownEvent_errors_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ConnectionDownEvent_errors_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ConnectionDownEvent_errors_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Error'(H, [<<48>>]),
   'enc_ConnectionDownEvent_errors_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ConnectionDownEvent_errors'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Error'(V1, [16]) || V1 <- Tlv1].




'dec_ConnectionDownEvent'(Tlv) ->
   'dec_ConnectionDownEvent'(Tlv, [16]).

'dec_ConnectionDownEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute connectionId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute customerId(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute userId(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_enumerated(V4,[],[{transmitter,0},{receiver,1},{transceiver,2}],[131075]),

%%-------------------------------------------------
%% attribute connectedAt(5) with type UTCTime
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_utc_time(V5,[],[131076]),

%%-------------------------------------------------
%% attribute msgsReceived(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = ?RT_BER:decode_integer(V6,[],[131077]),

%%-------------------------------------------------
%% attribute msgsSent(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = ?RT_BER:decode_integer(V7,[],[131078]),

%%-------------------------------------------------
%% attribute errors(8) with type SEQUENCE OF
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_ConnectionDownEvent_errors'(V8, [131079]),

%%-------------------------------------------------
%% attribute reason(9) with type ENUMERATED
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = ?RT_BER:decode_enumerated(V9,[],[{normal,0},{closed,1},{unbound,2},{other,3}],[131080]),

%%-------------------------------------------------
%% attribute timestamp(10) with type UTCTime
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = ?RT_BER:decode_utc_time(V10,[],[131081]),

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'ConnectionDownEvent', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  Error
%%================================
'enc_Error'(Val) ->
    'enc_Error'(Val, [<<48>>]).

'enc_Error'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute errorCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute timestamp(2) with type UTCTime
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_utc_time([], Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Error'(Tlv) ->
   'dec_Error'(Tlv, [16]).

'dec_Error'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute errorCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_integer(V1,[],[131072]),

%%-------------------------------------------------
%% attribute timestamp(2) with type UTCTime
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_utc_time(V2,[],[131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Error', Term1, Term2}.



%%================================
%%  OutgoingBatch
%%================================
'enc_OutgoingBatch'(Val) ->
    'enc_OutgoingBatch'(Val, [<<48>>]).

'enc_OutgoingBatch'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute messages(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_OutgoingBatch_messages'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  OutgoingBatch_messages
%%================================

'enc_OutgoingBatch_messages'({'OutgoingBatch_messages',Val}, TagIn) ->
   'enc_OutgoingBatch_messages'(Val, TagIn);

'enc_OutgoingBatch_messages'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_OutgoingBatch_messages_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_OutgoingBatch_messages_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_OutgoingBatch_messages_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_OutgoingMessage'(H, [<<48>>]),
   'enc_OutgoingBatch_messages_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_OutgoingBatch_messages'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_OutgoingMessage'(V1, [16]) || V1 <- Tlv1].




'dec_OutgoingBatch'(Tlv) ->
   'dec_OutgoingBatch'(Tlv, [16]).

'dec_OutgoingBatch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute messages(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_OutgoingBatch_messages'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'OutgoingBatch', Term1, Term2}.



%%================================
%%  OutgoingMessage
%%================================
'enc_OutgoingMessage'(Val) ->
    'enc_OutgoingMessage'(Val, [<<48>>]).

'enc_OutgoingMessage'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute source(1)   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Addr'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dest(2)   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Addr'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute message(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute dataCoding(4) with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_OutgoingMessage_dataCoding'(Cindex4, [<<163>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  OutgoingMessage_dataCoding
%%================================

'enc_OutgoingMessage_dataCoding'({'OutgoingMessage_dataCoding',Val}, TagIn) ->
   'enc_OutgoingMessage_dataCoding'(Val, TagIn);

'enc_OutgoingMessage_dataCoding'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      text ->
         case element(2,Val) of
gsm0338 -> ?RT_BER:encode_enumerated(0,[<<128>>]);
ucs2 -> ?RT_BER:encode_enumerated(8,[<<128>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      other ->
         ?RT_BER:encode_integer([], element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).


'dec_OutgoingMessage_dataCoding'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'text'
    {131072, V1} -> 
        {text, ?RT_BER:decode_enumerated(V1,[],[{gsm0338,0},{ucs2,8}],[])};


%% 'other'
    {131073, V1} -> 
        {other, ?RT_BER:decode_integer(V1,[],[])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_OutgoingMessage'(Tlv) ->
   'dec_OutgoingMessage'(Tlv, [16]).

'dec_OutgoingMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute source(1)   External FunnelAsn:Addr
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Addr'(V1, [131072]),

%%-------------------------------------------------
%% attribute dest(2)   External FunnelAsn:Addr
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Addr'(V2, [131073]),

%%-------------------------------------------------
%% attribute message(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_octet_string(V3,[],[131074]),

%%-------------------------------------------------
%% attribute dataCoding(4) with type CHOICE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_OutgoingMessage_dataCoding'(V4, [131075]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'OutgoingMessage', Term1, Term2, Term3, Term4}.



%%================================
%%  ReceiptBatch
%%================================
'enc_ReceiptBatch'(Val) ->
    'enc_ReceiptBatch'(Val, [<<48>>]).

'enc_ReceiptBatch'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute receipts(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReceiptBatch_receipts'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReceiptBatch_receipts
%%================================

'enc_ReceiptBatch_receipts'({'ReceiptBatch_receipts',Val}, TagIn) ->
   'enc_ReceiptBatch_receipts'(Val, TagIn);

'enc_ReceiptBatch_receipts'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ReceiptBatch_receipts_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ReceiptBatch_receipts_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReceiptBatch_receipts_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DeliveryReceipt'(H, [<<48>>]),
   'enc_ReceiptBatch_receipts_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ReceiptBatch_receipts'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_DeliveryReceipt'(V1, [16]) || V1 <- Tlv1].




'dec_ReceiptBatch'(Tlv) ->
   'dec_ReceiptBatch'(Tlv, [16]).

'dec_ReceiptBatch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute receipts(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ReceiptBatch_receipts'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ReceiptBatch', Term1, Term2}.



%%================================
%%  DeliveryReceipt
%%================================
'enc_DeliveryReceipt'(Val) ->
    'enc_DeliveryReceipt'(Val, [<<48>>]).

'enc_DeliveryReceipt'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute messageId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute submitDate(2) with type UTCTime
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_utc_time([], Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute doneDate(3) with type UTCTime
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_utc_time([], Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute messageState(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
delivered -> ?RT_BER:encode_enumerated(2,[<<131>>]);
expired -> ?RT_BER:encode_enumerated(3,[<<131>>]);
deleted -> ?RT_BER:encode_enumerated(4,[<<131>>]);
undeliverable -> ?RT_BER:encode_enumerated(5,[<<131>>]);
accepted -> ?RT_BER:encode_enumerated(6,[<<131>>]);
unknown -> ?RT_BER:encode_enumerated(7,[<<131>>]);
rejected -> ?RT_BER:encode_enumerated(8,[<<131>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute source(5)   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_Addr'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute dest(6)   External FunnelAsn:Addr
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_Addr'(Cindex6, [<<165>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DeliveryReceipt'(Tlv) ->
   'dec_DeliveryReceipt'(Tlv, [16]).

'dec_DeliveryReceipt'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute messageId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute submitDate(2) with type UTCTime
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_utc_time(V2,[],[131073]),

%%-------------------------------------------------
%% attribute doneDate(3) with type UTCTime
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_utc_time(V3,[],[131074]),

%%-------------------------------------------------
%% attribute messageState(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_enumerated(V4,[],[{delivered,2},{expired,3},{deleted,4},{undeliverable,5},{accepted,6},{unknown,7},{rejected,8}],[131075]),

%%-------------------------------------------------
%% attribute source(5)   External FunnelAsn:Addr
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_Addr'(V5, [131076]),

%%-------------------------------------------------
%% attribute dest(6)   External FunnelAsn:Addr
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_Addr'(V6, [131077]),

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'DeliveryReceipt', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  BatchAck
%%================================
'enc_BatchAck'(Val) ->
    'enc_BatchAck'(Val, [<<48>>]).

'enc_BatchAck'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute batchId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BatchAck'(Tlv) ->
   'dec_BatchAck'(Tlv, [16]).

'dec_BatchAck'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute batchId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'BatchAck', Term1}.



%%================================
%%  Addr
%%================================
'enc_Addr'(Val) ->
    'enc_Addr'(Val, [<<48>>]).

'enc_Addr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute addr(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute ton(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute npi(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Addr'(Tlv) ->
   'dec_Addr'(Tlv, [16]).

'dec_Addr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute addr(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute ton(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[131073]),

%%-------------------------------------------------
%% attribute npi(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_integer(V3,[],[131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'Addr', Term1, Term2, Term3}.



'dec-inc-OutgoingBatch'(Tlv) ->
   'dec-inc-OutgoingBatch'(Tlv, [16]).

'dec-inc-OutgoingBatch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = {'OutgoingBatch_id',V1},

%%-------------------------------------------------
%% attribute messages(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = {'OutgoingBatch_messages',?RT_BER:match_tags(V2, [131073])},

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'OutgoingBatch', Term1, Term2}.



'dec-inc-ReceiptBatch'(Tlv) ->
   'dec-inc-ReceiptBatch'(Tlv, [16]).

'dec-inc-ReceiptBatch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = {'ReceiptBatch_id',V1},

%%-------------------------------------------------
%% attribute receipts(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = {'ReceiptBatch_receipts',?RT_BER:match_tags(V2, [131073])},

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ReceiptBatch', Term1, Term2}.

outgoing_batch_id(Bin) ->
  case ?RT_BER:decode_selective([[choosen,<<48>>],[choosen,<<128>>]],Bin) of
    {ok,Bin2} when is_binary(Bin2) ->
      {Tlv,_} = ?RT_BER:decode(Bin2),
{ok,?RT_BER:decode_restricted_string(Tlv,[],22,[131072])};
    Err -> exit({error,{selctive_decode,Err}})
  end.
receipt_batch_id(Bin) ->
  case ?RT_BER:decode_selective([[choosen,<<48>>],[choosen,<<128>>]],Bin) of
    {ok,Bin2} when is_binary(Bin2) ->
      {Tlv,_} = ?RT_BER:decode(Bin2),
{ok,?RT_BER:decode_restricted_string(Tlv,[],22,[131072])};
    Err -> exit({error,{selctive_decode,Err}})
  end.
outgoing_batch_messages(Bytes) ->
  decode_partial_incomplete('OutgoingBatch',Bytes,[mandatory,[[undec,131072],[parts,131073]]]).
receipt_batch_messages(Bytes) ->
  decode_partial_incomplete('ReceiptBatch',Bytes,[mandatory,[[undec,131072],[parts,131073]]]).
decode_inc_disp('ReceiptBatch_receipts',Data) ->
  case Data of
    L when is_list(L) ->
      'dec_ReceiptBatch_receipts'(lists:map(fun(X)->element(1,?RT_BER:decode(X)) end,L),[]);
    _ ->
      [Res] = 'dec_ReceiptBatch_receipts'([Data],[]),
      Res
  end;
decode_inc_disp('ReceiptBatch_id',Data) ->
?RT_BER:decode_restricted_string(Data,[],22,[131072]);
decode_inc_disp('OutgoingBatch_messages',Data) ->
  case Data of
    L when is_list(L) ->
      'dec_OutgoingBatch_messages'(lists:map(fun(X)->element(1,?RT_BER:decode(X)) end,L),[]);
    _ ->
      [Res] = 'dec_OutgoingBatch_messages'([Data],[]),
      Res
  end;
decode_inc_disp('OutgoingBatch_id',Data) ->
?RT_BER:decode_restricted_string(Data,[],22,[131072]).
