%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:1.6.18
%% Purpose: encoder and decoder to the types in mod JustAsn

-module('JustAsn').
-include("JustAsn.hrl").
-define('RT_BER',asn1rt_ber_bin_v2).
-asn1_info([{vsn,'1.6.18'},
            {module,'JustAsn'},
            {options,[ber_bin_v2,{outdir,[115,114,99]},noobj,optimize,asn1config,{i,[46]},{i,[97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_SmsRequest'/2,
'enc_SmsResponse'/2,
'enc_IncomingSm'/2,
'enc_ReceiptBatch'/2,
'enc_DeliveryReceipt'/2,
'enc_FullAddr'/2,
'enc_FullAddrAndRefNum'/2,
'enc_SmStatus'/2,
'enc_Param'/2
]).

-export([
'dec_SmsRequest'/2,
'dec_SmsResponse'/2,
'dec_IncomingSm'/2,
'dec_ReceiptBatch'/2,
'dec_DeliveryReceipt'/2,
'dec_FullAddr'/2,
'dec_FullAddrAndRefNum'/2,
'dec_SmStatus'/2,
'dec_Param'/2
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber_bin_v2.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,Bytes};
  Bytes ->
    {ok,Bytes}
end.

decode(Type,Data) ->
case catch decode_disp(Type,element(1,?RT_BER:decode(Data))
) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  Result ->
    {ok,Result}
end.

encode_disp('SmsRequest',Data) -> 'enc_SmsRequest'(Data);
encode_disp('SmsResponse',Data) -> 'enc_SmsResponse'(Data);
encode_disp('IncomingSm',Data) -> 'enc_IncomingSm'(Data);
encode_disp('ReceiptBatch',Data) -> 'enc_ReceiptBatch'(Data);
encode_disp('DeliveryReceipt',Data) -> 'enc_DeliveryReceipt'(Data);
encode_disp('FullAddr',Data) -> 'enc_FullAddr'(Data);
encode_disp('FullAddrAndRefNum',Data) -> 'enc_FullAddrAndRefNum'(Data);
encode_disp('SmStatus',Data) -> 'enc_SmStatus'(Data);
encode_disp('Param',Data) -> 'enc_Param'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('SmsRequest',Data) -> 'dec_SmsRequest'(Data);
decode_disp('SmsResponse',Data) -> 'dec_SmsResponse'(Data);
decode_disp('IncomingSm',Data) -> 'dec_IncomingSm'(Data);
decode_disp('ReceiptBatch',Data) -> 'dec_ReceiptBatch'(Data);
decode_disp('DeliveryReceipt',Data) -> 'dec_DeliveryReceipt'(Data);
decode_disp('FullAddr',Data) -> 'dec_FullAddr'(Data);
decode_disp('FullAddrAndRefNum',Data) -> 'dec_FullAddrAndRefNum'(Data);
decode_disp('SmStatus',Data) -> 'dec_SmStatus'(Data);
decode_disp('Param',Data) -> 'dec_Param'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).





info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  SmsRequest
%%================================
'enc_SmsRequest'(Val) ->
    'enc_SmsRequest'(Val, [<<48>>]).

'enc_SmsRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute gatewayId(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
regular -> ?RT_BER:encode_enumerated(0,[<<131>>]);
part -> ?RT_BER:encode_enumerated(1,[<<131>>]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute message(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute encoding(6) with type CHOICE
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_SmsRequest_encoding'(Cindex6, [<<165>>]),

%%-------------------------------------------------
%% attribute params(7) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_SmsRequest_params'(Cindex7, [<<166>>]),

%%-------------------------------------------------
%% attribute sourceAddr(8)   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_FullAddr'(Cindex8, [<<167>>]),

%%-------------------------------------------------
%% attribute destAddrs(9) with type CHOICE
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_SmsRequest_destAddrs'(Cindex9, [<<168>>]),

%%-------------------------------------------------
%% attribute messageIds(10) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes10,EncLen10} = 'enc_SmsRequest_messageIds'(Cindex10, [<<169>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SmsRequest_encoding
%%================================

'enc_SmsRequest_encoding'({'SmsRequest_encoding',Val}, TagIn) ->
   'enc_SmsRequest_encoding'(Val, TagIn);

'enc_SmsRequest_encoding'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      text ->
         case element(2,Val) of
default -> ?RT_BER:encode_enumerated(-1,[<<128>>]);
gsm0338 -> ?RT_BER:encode_enumerated(0,[<<128>>]);
ascii -> ?RT_BER:encode_enumerated(1,[<<128>>]);
latin1 -> ?RT_BER:encode_enumerated(3,[<<128>>]);
ucs2 -> ?RT_BER:encode_enumerated(8,[<<128>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      other ->
         ?RT_BER:encode_integer([], element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).


'dec_SmsRequest_encoding'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'text'
    {131072, V1} -> 
        {text, ?RT_BER:decode_enumerated(V1,[],[{default,-1},{gsm0338,0},{ascii,1},{latin1,3},{ucs2,8}],[])};


%% 'other'
    {131073, V1} -> 
        {other, ?RT_BER:decode_integer(V1,[],[])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  SmsRequest_params
%%================================

'enc_SmsRequest_params'({'SmsRequest_params',Val}, TagIn) ->
   'enc_SmsRequest_params'(Val, TagIn);

'enc_SmsRequest_params'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_params_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_SmsRequest_params_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_params_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Param'(H, [<<48>>]),
   'enc_SmsRequest_params_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_params'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_Param'(V1, [16]) || V1 <- Tlv1].





%%================================
%%  SmsRequest_destAddrs
%%================================

'enc_SmsRequest_destAddrs'({'SmsRequest_destAddrs',Val}, TagIn) ->
   'enc_SmsRequest_destAddrs'(Val, TagIn);

'enc_SmsRequest_destAddrs'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      regular ->
         'enc_SmsRequest_destAddrs_regular'(element(2,Val), [<<160>>]);
      part ->
         'enc_SmsRequest_destAddrs_part'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SmsRequest_destAddrs_regular
%%================================

'enc_SmsRequest_destAddrs_regular'({'SmsRequest_destAddrs_regular',Val}, TagIn) ->
   'enc_SmsRequest_destAddrs_regular'(Val, TagIn);

'enc_SmsRequest_destAddrs_regular'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_destAddrs_regular_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_SmsRequest_destAddrs_regular_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_destAddrs_regular_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FullAddr'(H, [<<48>>]),
   'enc_SmsRequest_destAddrs_regular_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_destAddrs_regular'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_FullAddr'(V1, [16]) || V1 <- Tlv1].





%%================================
%%  SmsRequest_destAddrs_part
%%================================

'enc_SmsRequest_destAddrs_part'({'SmsRequest_destAddrs_part',Val}, TagIn) ->
   'enc_SmsRequest_destAddrs_part'(Val, TagIn);

'enc_SmsRequest_destAddrs_part'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_destAddrs_part_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_SmsRequest_destAddrs_part_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_destAddrs_part_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FullAddrAndRefNum'(H, [<<48>>]),
   'enc_SmsRequest_destAddrs_part_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_destAddrs_part'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_FullAddrAndRefNum'(V1, [16]) || V1 <- Tlv1].


'dec_SmsRequest_destAddrs'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'regular'
    {131072, V1} -> 
        {regular, 'dec_SmsRequest_destAddrs_regular'(V1, [])};


%% 'part'
    {131073, V1} -> 
        {part, 'dec_SmsRequest_destAddrs_part'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  SmsRequest_messageIds
%%================================

'enc_SmsRequest_messageIds'({'SmsRequest_messageIds',Val}, TagIn) ->
   'enc_SmsRequest_messageIds'(Val, TagIn);

'enc_SmsRequest_messageIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_messageIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_SmsRequest_messageIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_messageIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 22, [<<22>>]),
   'enc_SmsRequest_messageIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_messageIds'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
[?RT_BER:decode_restricted_string(V1,[],22,[22]) || V1 <- Tlv1].




'dec_SmsRequest'(Tlv) ->
   'dec_SmsRequest'(Tlv, [16]).

'dec_SmsRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute gatewayId(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute type(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_enumerated(V4,[],[{regular,0},{part,1}],[131075]),

%%-------------------------------------------------
%% attribute message(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_octet_string(V5,[],[131076]),

%%-------------------------------------------------
%% attribute encoding(6) with type CHOICE
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_SmsRequest_encoding'(V6, [131077]),

%%-------------------------------------------------
%% attribute params(7) with type SEQUENCE OF
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = 'dec_SmsRequest_params'(V7, [131078]),

%%-------------------------------------------------
%% attribute sourceAddr(8)   External JustAsn:FullAddr
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_FullAddr'(V8, [131079]),

%%-------------------------------------------------
%% attribute destAddrs(9) with type CHOICE
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = 'dec_SmsRequest_destAddrs'(V9, [131080]),

%%-------------------------------------------------
%% attribute messageIds(10) with type SEQUENCE OF
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = 'dec_SmsRequest_messageIds'(V10, [131081]),

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'SmsRequest', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  SmsResponse
%%================================
'enc_SmsResponse'(Val) ->
    'enc_SmsResponse'(Val, [<<48>>]).

'enc_SmsResponse'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute gatewayId(2) with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], Cindex2, 22, [<<129>>]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], Cindex3, 22, [<<130>>]),

%%-------------------------------------------------
%% attribute statuses(4) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_SmsResponse_statuses'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute timestamp(5) with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], Cindex5, [<<132>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SmsResponse_statuses
%%================================

'enc_SmsResponse_statuses'({'SmsResponse_statuses',Val}, TagIn) ->
   'enc_SmsResponse_statuses'(Val, TagIn);

'enc_SmsResponse_statuses'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsResponse_statuses_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_SmsResponse_statuses_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsResponse_statuses_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SmStatus'(H, [<<48>>]),
   'enc_SmsResponse_statuses_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsResponse_statuses'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_SmStatus'(V1, [16]) || V1 <- Tlv1].




'dec_SmsResponse'(Tlv) ->
   'dec_SmsResponse'(Tlv, [16]).

'dec_SmsResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute id(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute gatewayId(2) with type IA5String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_restricted_string(V2,[],22,[131073]),

%%-------------------------------------------------
%% attribute customerId(3) with type IA5String
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_restricted_string(V3,[],22,[131074]),

%%-------------------------------------------------
%% attribute statuses(4) with type SEQUENCE OF
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_SmsResponse_statuses'(V4, [131075]),

%%-------------------------------------------------
%% attribute timestamp(5) with type UTCTime
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_utc_time(V5,[],[131076]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'SmsResponse', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  IncomingSm
%%================================
'enc_IncomingSm'(Val) ->
    'enc_IncomingSm'(Val, [<<48>>]).

'enc_IncomingSm'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute gatewayId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute source(2)   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_FullAddr'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute dest(3)   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_FullAddr'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute message(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_octet_string([], Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute dataCoding(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute partsRefNum(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute partsCount(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute partIndex(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute timestamp(9) with type UTCTime
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_utc_time([], Cindex9, [<<136>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IncomingSm'(Tlv) ->
   'dec_IncomingSm'(Tlv, [16]).

'dec_IncomingSm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute gatewayId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute source(2)   External JustAsn:FullAddr
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_FullAddr'(V2, [131073]),

%%-------------------------------------------------
%% attribute dest(3)   External JustAsn:FullAddr
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_FullAddr'(V3, [131074]),

%%-------------------------------------------------
%% attribute message(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_octet_string(V4,[],[131075]),

%%-------------------------------------------------
%% attribute dataCoding(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = ?RT_BER:decode_integer(V5,[],[131076]),

%%-------------------------------------------------
%% attribute partsRefNum(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {?RT_BER:decode_integer(V6,[],[]), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute partsCount(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {?RT_BER:decode_integer(V7,[],[]), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute partIndex(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {?RT_BER:decode_integer(V8,[],[]), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute timestamp(9) with type UTCTime
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = ?RT_BER:decode_utc_time(V9,[],[131080]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'IncomingSm', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  ReceiptBatch
%%================================
'enc_ReceiptBatch'(Val) ->
    'enc_ReceiptBatch'(Val, [<<48>>]).

'enc_ReceiptBatch'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute gatewayId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute receipts(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReceiptBatch_receipts'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute timestamp(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReceiptBatch_receipts
%%================================

'enc_ReceiptBatch_receipts'({'ReceiptBatch_receipts',Val}, TagIn) ->
   'enc_ReceiptBatch_receipts'(Val, TagIn);

'enc_ReceiptBatch_receipts'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ReceiptBatch_receipts_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn, EncBytes, EncLen).

'enc_ReceiptBatch_receipts_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReceiptBatch_receipts_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DeliveryReceipt'(H, [<<48>>]),
   'enc_ReceiptBatch_receipts_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ReceiptBatch_receipts'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
['dec_DeliveryReceipt'(V1, [16]) || V1 <- Tlv1].




'dec_ReceiptBatch'(Tlv) ->
   'dec_ReceiptBatch'(Tlv, [16]).

'dec_ReceiptBatch'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute gatewayId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute receipts(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ReceiptBatch_receipts'(V2, [131073]),

%%-------------------------------------------------
%% attribute timestamp(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_integer(V3,[],[131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ReceiptBatch', Term1, Term2, Term3}.



%%================================
%%  DeliveryReceipt
%%================================
'enc_DeliveryReceipt'(Val) ->
    'enc_DeliveryReceipt'(Val, [<<48>>]).

'enc_DeliveryReceipt'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute messageId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute messageState(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
enroute -> ?RT_BER:encode_enumerated(1,[<<129>>]);
delivered -> ?RT_BER:encode_enumerated(2,[<<129>>]);
expired -> ?RT_BER:encode_enumerated(3,[<<129>>]);
deleted -> ?RT_BER:encode_enumerated(4,[<<129>>]);
undeliverable -> ?RT_BER:encode_enumerated(5,[<<129>>]);
accepted -> ?RT_BER:encode_enumerated(6,[<<129>>]);
unknown -> ?RT_BER:encode_enumerated(7,[<<129>>]);
rejected -> ?RT_BER:encode_enumerated(8,[<<129>>]);
unrecognized -> ?RT_BER:encode_enumerated(9,[<<129>>]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute source(3)   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_FullAddr'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DeliveryReceipt'(Tlv) ->
   'dec_DeliveryReceipt'(Tlv, [16]).

'dec_DeliveryReceipt'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute messageId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute messageState(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_enumerated(V2,[],[{enroute,1},{delivered,2},{expired,3},{deleted,4},{undeliverable,5},{accepted,6},{unknown,7},{rejected,8},{unrecognized,9}],[131073]),

%%-------------------------------------------------
%% attribute source(3)   External JustAsn:FullAddr
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_FullAddr'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'DeliveryReceipt', Term1, Term2, Term3}.



%%================================
%%  FullAddr
%%================================
'enc_FullAddr'(Val) ->
    'enc_FullAddr'(Val, [<<48>>]).

'enc_FullAddr'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute addr(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute ton(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute npi(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FullAddr'(Tlv) ->
   'dec_FullAddr'(Tlv, [16]).

'dec_FullAddr'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute addr(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute ton(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[131073]),

%%-------------------------------------------------
%% attribute npi(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_integer(V3,[],[131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'FullAddr', Term1, Term2, Term3}.



%%================================
%%  FullAddrAndRefNum
%%================================
'enc_FullAddrAndRefNum'(Val) ->
    'enc_FullAddrAndRefNum'(Val, [<<48>>]).

'enc_FullAddrAndRefNum'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute fullAddr(1)   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_FullAddr'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute refNum(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FullAddrAndRefNum'(Tlv) ->
   'dec_FullAddrAndRefNum'(Tlv, [16]).

'dec_FullAddrAndRefNum'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute fullAddr(1)   External JustAsn:FullAddr
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_FullAddr'(V1, [131072]),

%%-------------------------------------------------
%% attribute refNum(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = ?RT_BER:decode_integer(V2,[],[131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'FullAddrAndRefNum', Term1, Term2}.



%%================================
%%  SmStatus
%%================================
'enc_SmStatus'(Val) ->
    'enc_SmStatus'(Val, [<<48>>]).

'enc_SmStatus'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute originalId(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute destAddr(2)   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_FullAddr'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute status(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
success -> ?RT_BER:encode_enumerated(0,[<<130>>]);
failure -> ?RT_BER:encode_enumerated(1,[<<130>>]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute partsTotal(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute partIndex(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute messageId(6) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], Cindex6, 22, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute errorCode(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], Cindex7, [<<134>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SmStatus'(Tlv) ->
   'dec_SmStatus'(Tlv, [16]).

'dec_SmStatus'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute originalId(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute destAddr(2)   External JustAsn:FullAddr
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_FullAddr'(V2, [131073]),

%%-------------------------------------------------
%% attribute status(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = ?RT_BER:decode_enumerated(V3,[],[{success,0},{failure,1}],[131074]),

%%-------------------------------------------------
%% attribute partsTotal(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = ?RT_BER:decode_integer(V4,[],[131075]),

%%-------------------------------------------------
%% attribute partIndex(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {?RT_BER:decode_integer(V5,[],[]), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute messageId(6) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {?RT_BER:decode_restricted_string(V6,[],22,[]), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute errorCode(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {?RT_BER:decode_integer(V7,[],[]), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'SmStatus', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  Param
%%================================
'enc_Param'(Val) ->
    'enc_Param'(Val, [<<48>>]).

'enc_Param'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], Cindex1, 22, [<<128>>]),

%%-------------------------------------------------
%% attribute value(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Param_value'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
?RT_BER:encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Param_value
%%================================

'enc_Param_value'({'Param_value',Val}, TagIn) ->
   'enc_Param_value'(Val, TagIn);

'enc_Param_value'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      integer ->
         ?RT_BER:encode_integer([], element(2,Val), [<<128>>]);
      string ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [<<129>>]);
      boolean ->
         ?RT_BER:encode_boolean(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn, EncBytes, EncLen).


'dec_Param_value'(Tlv, TagIn) ->
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'integer'
    {131072, V1} -> 
        {integer, ?RT_BER:decode_integer(V1,[],[])};


%% 'string'
    {131073, V1} -> 
        {string, ?RT_BER:decode_restricted_string(V1,[],22,[])};


%% 'boolean'
    {131074, V1} -> 
        {boolean, ?RT_BER:decode_boolean(V1,[])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_Param'(Tlv) ->
   'dec_Param'(Tlv, [16]).

'dec_Param'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = ?RT_BER:match_tags(Tlv,TagIn), 

%%-------------------------------------------------
%% attribute name(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = ?RT_BER:decode_restricted_string(V1,[],22,[131072]),

%%-------------------------------------------------
%% attribute value(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Param_value'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Param', Term1, Term2}.

