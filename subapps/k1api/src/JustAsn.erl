%% Generated by the Erlang ASN.1 BER-compiler version:1.6.18
%% Purpose: encoder and decoder to the types in mod JustAsn

-module('JustAsn').
-include("JustAsn.hrl").
-define('RT_BER',asn1rt_ber_bin).
-asn1_info([{vsn,'1.6.18'},
            {module,'JustAsn'},
            {options,[{outdir,[115,114,99]},noobj,{i,[46]},{i,[97,115,110,49]}]}]).

-export([encoding_rule/0]).
-export([
'enc_SmsRequest'/2,
'enc_SmsResponse'/2,
'enc_IncomingSm'/2,
'enc_ReceiptBatch'/2,
'enc_DeliveryReceipt'/2,
'enc_FullAddr'/2,
'enc_FullAddrAndRefNum'/2,
'enc_SmStatus'/2,
'enc_Param'/2
]).

-export([
'dec_SmsRequest'/2,
'dec_SmsResponse'/2,
'dec_IncomingSm'/2,
'dec_ReceiptBatch'/2,
'dec_DeliveryReceipt'/2,
'dec_FullAddr'/2,
'dec_FullAddrAndRefNum'/2,
'dec_SmStatus'/2,
'dec_Param'/2
]).

-export([
'dec_SmsRequest'/3,
'dec_SmsResponse'/3,
'dec_IncomingSm'/3,
'dec_ReceiptBatch'/3,
'dec_DeliveryReceipt'/3,
'dec_FullAddr'/3,
'dec_FullAddrAndRefNum'/3,
'dec_SmStatus'/3,
'dec_Param'/3
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,wrap_encode(Bytes)};
  Bytes ->
    {ok,wrap_encode(Bytes)}
end.

decode(Type,Data) ->
case catch decode_disp(Type,wrap_decode(Data)) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('SmsRequest',Data) -> 'enc_SmsRequest'(Data,[]);
encode_disp('SmsResponse',Data) -> 'enc_SmsResponse'(Data,[]);
encode_disp('IncomingSm',Data) -> 'enc_IncomingSm'(Data,[]);
encode_disp('ReceiptBatch',Data) -> 'enc_ReceiptBatch'(Data,[]);
encode_disp('DeliveryReceipt',Data) -> 'enc_DeliveryReceipt'(Data,[]);
encode_disp('FullAddr',Data) -> 'enc_FullAddr'(Data,[]);
encode_disp('FullAddrAndRefNum',Data) -> 'enc_FullAddrAndRefNum'(Data,[]);
encode_disp('SmStatus',Data) -> 'enc_SmStatus'(Data,[]);
encode_disp('Param',Data) -> 'enc_Param'(Data,[]);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('SmsRequest',Data) -> 'dec_SmsRequest'(Data,mandatory);
decode_disp('SmsResponse',Data) -> 'dec_SmsResponse'(Data,mandatory);
decode_disp('IncomingSm',Data) -> 'dec_IncomingSm'(Data,mandatory);
decode_disp('ReceiptBatch',Data) -> 'dec_ReceiptBatch'(Data,mandatory);
decode_disp('DeliveryReceipt',Data) -> 'dec_DeliveryReceipt'(Data,mandatory);
decode_disp('FullAddr',Data) -> 'dec_FullAddr'(Data,mandatory);
decode_disp('FullAddrAndRefNum',Data) -> 'dec_FullAddrAndRefNum'(Data,mandatory);
decode_disp('SmStatus',Data) -> 'dec_SmStatus'(Data,mandatory);
decode_disp('Param',Data) -> 'dec_Param'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).



wrap_encode(Bytes) when is_list(Bytes) ->
   binary_to_list(list_to_binary(Bytes));
wrap_encode(Bytes) when is_binary(Bytes) ->
   binary_to_list(Bytes);
wrap_encode(Bytes) -> Bytes.

wrap_decode(Bytes) when is_list(Bytes) ->
   list_to_binary(Bytes);
wrap_decode(Bytes) -> Bytes.


info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  SmsRequest
%%================================
'enc_SmsRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,gatewayId), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,customerId), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,type) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(5,Val,type) end) of
regular -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',32}]);
part -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',32}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute number 5 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(6,Val,message), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6 with type CHOICE
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_SmsRequest_encoding'(?RT_BER:cindex(7,Val,encoding), [{tag,128,5,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 7 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_SmsRequest_params'(?RT_BER:cindex(8,Val,params), [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_FullAddr'(?RT_BER:cindex(9,Val,sourceAddr), [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type CHOICE
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_SmsRequest_destAddrs'(?RT_BER:cindex(10,Val,destAddrs), [{tag,128,8,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 10 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes10,EncLen10} = 'enc_SmsRequest_messageIds'(?RT_BER:cindex(11,Val,messageIds), [{tag,128,9,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SmsRequest_encoding
%%================================

'enc_SmsRequest_encoding'({'SmsRequest_encoding',Val}, TagIn) ->
   'enc_SmsRequest_encoding'(Val, TagIn);

'enc_SmsRequest_encoding'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      text ->
         case (case element(2,Val) of {_,Enumval1}->Enumval1;_->element(2,Val) end) of
default -> ?RT_BER:encode_enumerated(-1,[{tag,128,0,'IMPLICIT',32}]);
gsm0338 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',32}]);
ascii -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',32}]);
latin1 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',32}]);
ucs2 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',32}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      other ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_SmsRequest_encoding'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'text'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_enumerated(Bytes1,[],[{default,-1},{gsm0338,0},{ascii,1},{latin1,3},{ucs2,8}],[{tag,128,0,'IMPLICIT',32}], mandatory),
         {{text, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'other'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,[],[{tag,128,1,'IMPLICIT',32}], mandatory),
         {{other, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  SmsRequest_params
%%================================

'enc_SmsRequest_params'({'SmsRequest_params',Val}, TagIn) ->
   'enc_SmsRequest_params'(Val, TagIn);

'enc_SmsRequest_params'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_params_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SmsRequest_params_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_params_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Param'(H, []),
   'enc_SmsRequest_params_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_params'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_Param'/3, [], []).





%%================================
%%  SmsRequest_destAddrs
%%================================

'enc_SmsRequest_destAddrs'({'SmsRequest_destAddrs',Val}, TagIn) ->
   'enc_SmsRequest_destAddrs'(Val, TagIn);

'enc_SmsRequest_destAddrs'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      regular ->
         'enc_SmsRequest_destAddrs_regular'(element(2,Val), [{tag,128,0,'IMPLICIT',32}]);
      part ->
         'enc_SmsRequest_destAddrs_part'(element(2,Val), [{tag,128,1,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SmsRequest_destAddrs_regular
%%================================

'enc_SmsRequest_destAddrs_regular'({'SmsRequest_destAddrs_regular',Val}, TagIn) ->
   'enc_SmsRequest_destAddrs_regular'(Val, TagIn);

'enc_SmsRequest_destAddrs_regular'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_destAddrs_regular_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SmsRequest_destAddrs_regular_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_destAddrs_regular_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FullAddr'(H, []),
   'enc_SmsRequest_destAddrs_regular_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_destAddrs_regular'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_FullAddr'/3, [], []).





%%================================
%%  SmsRequest_destAddrs_part
%%================================

'enc_SmsRequest_destAddrs_part'({'SmsRequest_destAddrs_part',Val}, TagIn) ->
   'enc_SmsRequest_destAddrs_part'(Val, TagIn);

'enc_SmsRequest_destAddrs_part'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_destAddrs_part_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SmsRequest_destAddrs_part_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_destAddrs_part_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FullAddrAndRefNum'(H, []),
   'enc_SmsRequest_destAddrs_part_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_destAddrs_part'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_FullAddrAndRefNum'/3, [], []).


'dec_SmsRequest_destAddrs'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'regular'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SmsRequest_destAddrs_regular'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',32}]),
         {{regular, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'part'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SmsRequest_destAddrs_part'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',32}]),
         {{part, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  SmsRequest_messageIds
%%================================

'enc_SmsRequest_messageIds'({'SmsRequest_messageIds',Val}, TagIn) ->
   'enc_SmsRequest_messageIds'(Val, TagIn);

'enc_SmsRequest_messageIds'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsRequest_messageIds_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SmsRequest_messageIds_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsRequest_messageIds_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_restricted_string([], H, 22, []),
   'enc_SmsRequest_messageIds_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsRequest_messageIds'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_restricted_string(FBytes,[],22,[], no_length, mandatory)
end, [], []).




'dec_SmsRequest'(Bytes, OptOrMand) ->
   'dec_SmsRequest'(Bytes, OptOrMand, []).

'dec_SmsRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{regular,0},{part,1}],[{tag,128,3,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type OCTET STRING
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_octet_string(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 6 with type CHOICE
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = 'dec_SmsRequest_encoding'(Bytes7, mandatory, [{tag,128,5,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 7 with type SEQUENCE OF
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = 'dec_SmsRequest_params'(Bytes8, mandatory, [{tag,128,6,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 8   External JustAsn:FullAddr
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = 'dec_FullAddr'(Bytes9, mandatory, [{tag,128,7,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9 with type CHOICE
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = 'dec_SmsRequest_destAddrs'(Bytes10, mandatory, [{tag,128,8,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 10 with type SEQUENCE OF
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = 'dec_SmsRequest_messageIds'(Bytes11, mandatory, [{tag,128,9,'IMPLICIT',32}]),

   {Bytes13,Rb12} = ?RT_BER:restbytes2(RemBytes, Bytes12,noext),
   {{'SmsRequest', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}, Bytes13, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12}.


%%================================
%%  SmsResponse
%%================================
'enc_SmsResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,id), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(3,Val,gatewayId), 22, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(4,Val,customerId), 22, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_SmsResponse_statuses'(?RT_BER:cindex(5,Val,statuses), [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(6,Val,timestamp), [{tag,128,4,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SmsResponse_statuses
%%================================

'enc_SmsResponse_statuses'({'SmsResponse_statuses',Val}, TagIn) ->
   'enc_SmsResponse_statuses'(Val, TagIn);

'enc_SmsResponse_statuses'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SmsResponse_statuses_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SmsResponse_statuses_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SmsResponse_statuses_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SmStatus'(H, []),
   'enc_SmsResponse_statuses_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_SmsResponse_statuses'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_SmStatus'/3, [], []).




'dec_SmsResponse'(Bytes, OptOrMand) ->
   'dec_SmsResponse'(Bytes, OptOrMand, []).

'dec_SmsResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type IA5String
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_restricted_string(Bytes3,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type IA5String
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_restricted_string(Bytes4,[],22,[{tag,128,2,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OF
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_SmsResponse_statuses'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type UTCTime
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_utc_time(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], no_length, mandatory),

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'SmsResponse', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  IncomingSm
%%================================
'enc_IncomingSm'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,gatewayId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_FullAddr'(?RT_BER:cindex(3,Val,source), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_FullAddr'(?RT_BER:cindex(4,Val,dest), [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(5,Val,message), [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,dataCoding), [{tag,128,4,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,partsRefNum) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,partsRefNum), [{tag,128,5,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,partsCount) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,partsCount), [{tag,128,6,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 8 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,partIndex) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(9,Val,partIndex), [{tag,128,7,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 9 with type UTCTime
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_utc_time([], ?RT_BER:cindex(10,Val,timestamp), [{tag,128,8,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IncomingSm'(Bytes, OptOrMand) ->
   'dec_IncomingSm'(Bytes, OptOrMand, []).

'dec_IncomingSm'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2   External JustAsn:FullAddr
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_FullAddr'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3   External JustAsn:FullAddr
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_FullAddr'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type OCTET STRING
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_octet_string(Bytes5,[],[{tag,128,3,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
?RT_BER:decode_integer(Bytes7,[],[{tag,128,5,'IMPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
?RT_BER:decode_integer(Bytes8,[],[{tag,128,6,'IMPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
?RT_BER:decode_integer(Bytes9,[],[{tag,128,7,'IMPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9 with type UTCTime
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = ?RT_BER:decode_utc_time(Bytes10,[],[{tag,128,8,'IMPLICIT',32}], no_length, mandatory),

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'IncomingSm', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


%%================================
%%  ReceiptBatch
%%================================
'enc_ReceiptBatch'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,gatewayId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReceiptBatch_receipts'(?RT_BER:cindex(3,Val,receipts), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,timestamp), [{tag,128,2,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReceiptBatch_receipts
%%================================

'enc_ReceiptBatch_receipts'({'ReceiptBatch_receipts',Val}, TagIn) ->
   'enc_ReceiptBatch_receipts'(Val, TagIn);

'enc_ReceiptBatch_receipts'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ReceiptBatch_receipts_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ReceiptBatch_receipts_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReceiptBatch_receipts_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DeliveryReceipt'(H, []),
   'enc_ReceiptBatch_receipts_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_ReceiptBatch_receipts'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_DeliveryReceipt'/3, [], []).




'dec_ReceiptBatch'(Bytes, OptOrMand) ->
   'dec_ReceiptBatch'(Bytes, OptOrMand, []).

'dec_ReceiptBatch'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OF
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_ReceiptBatch_receipts'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'ReceiptBatch', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  DeliveryReceipt
%%================================
'enc_DeliveryReceipt'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,messageId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,messageState) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,messageState) end) of
enroute -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',32}]);
delivered -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',32}]);
expired -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',32}]);
deleted -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',32}]);
undeliverable -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',32}]);
accepted -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',32}]);
unknown -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',32}]);
rejected -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',32}]);
unrecognized -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',32}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_FullAddr'(?RT_BER:cindex(4,Val,source), [{tag,128,2,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DeliveryReceipt'(Bytes, OptOrMand) ->
   'dec_DeliveryReceipt'(Bytes, OptOrMand, []).

'dec_DeliveryReceipt'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{enroute,1},{delivered,2},{expired,3},{deleted,4},{undeliverable,5},{accepted,6},{unknown,7},{rejected,8},{unrecognized,9}],[{tag,128,1,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 3   External JustAsn:FullAddr
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_FullAddr'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',32}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'DeliveryReceipt', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  FullAddr
%%================================
'enc_FullAddr'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,addr), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,ton), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,npi), [{tag,128,2,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_FullAddr'(Bytes, OptOrMand) ->
   'dec_FullAddr'(Bytes, OptOrMand, []).

'dec_FullAddr'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,[],[{tag,128,1,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,[],[{tag,128,2,'IMPLICIT',32}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'FullAddr', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  FullAddrAndRefNum
%%================================
'enc_FullAddrAndRefNum'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_FullAddr'(?RT_BER:cindex(2,Val,fullAddr), [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,refNum), [{tag,128,1,'IMPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_FullAddrAndRefNum'(Bytes, OptOrMand) ->
   'dec_FullAddrAndRefNum'(Bytes, OptOrMand, []).

'dec_FullAddrAndRefNum'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External JustAsn:FullAddr
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_FullAddr'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,[],[{tag,128,1,'IMPLICIT',32}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'FullAddrAndRefNum', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SmStatus
%%================================
'enc_SmStatus'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,originalId), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2   External JustAsn:FullAddr
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_FullAddr'(?RT_BER:cindex(3,Val,destAddr), [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,status) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(4,Val,status) end) of
success -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',32}]);
failure -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',32}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,partsTotal), [{tag,128,3,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,partIndex) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,partIndex), [{tag,128,4,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 6 with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,messageId) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(7,Val,messageId), 22, [{tag,128,5,'IMPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,errorCode) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,errorCode), [{tag,128,6,'IMPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SmStatus'(Bytes, OptOrMand) ->
   'dec_SmStatus'(Bytes, OptOrMand, []).

'dec_SmStatus'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2   External JustAsn:FullAddr
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_FullAddr'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{success,0},{failure,1}],[{tag,128,2,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,[],[{tag,128,3,'IMPLICIT',32}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
?RT_BER:decode_integer(Bytes6,[],[{tag,128,4,'IMPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6 with type IA5String OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
?RT_BER:decode_restricted_string(Bytes7,[],22,[{tag,128,5,'IMPLICIT',32}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
?RT_BER:decode_integer(Bytes8,[],[{tag,128,6,'IMPLICIT',32}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,noext),
   {{'SmStatus', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.


%%================================
%%  Param
%%================================
'enc_Param'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_restricted_string([], ?RT_BER:cindex(2,Val,name), 22, [{tag,128,0,'IMPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Param_value'(?RT_BER:cindex(3,Val,value), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Param_value
%%================================

'enc_Param_value'({'Param_value',Val}, TagIn) ->
   'enc_Param_value'(Val, TagIn);

'enc_Param_value'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      integer ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',32}]);
      string ->
         ?RT_BER:encode_restricted_string([], element(2,Val), 22, [{tag,128,1,'IMPLICIT',32}]);
      boolean ->
         ?RT_BER:encode_boolean(element(2,Val), [{tag,128,2,'IMPLICIT',32}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_Param_value'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'integer'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,[],[{tag,128,0,'IMPLICIT',32}], mandatory),
         {{integer, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'string'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_restricted_string(Bytes1,[],22,[{tag,128,1,'IMPLICIT',32}], no_length, mandatory),
         {{string, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'boolean'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_boolean(Bytes1,[{tag,128,2,'IMPLICIT',32}], mandatory),
         {{boolean, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_Param'(Bytes, OptOrMand) ->
   'dec_Param'(Bytes, OptOrMand, []).

'dec_Param'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type IA5String
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_restricted_string(Bytes2,[],22,[{tag,128,0,'IMPLICIT',32}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_Param_value'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'Param', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
